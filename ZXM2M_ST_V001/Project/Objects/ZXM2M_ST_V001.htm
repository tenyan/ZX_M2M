<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Project\Objects\ZXM2M_ST_V001.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Project\Objects\ZXM2M_ST_V001.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Sat May 08 17:10:55 2021
<BR><P>
<H3>Maximum Stack Usage =        840 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
iKVDB_DoGc &rArr; iKVDB_MoveKv &rArr; iKVDB_DelKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6a]">HardFault_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[69]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[69]">NMI_Handler</a><BR>
 <LI><a href="#[6b]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6b]">MemManage_Handler</a><BR>
 <LI><a href="#[6c]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6c]">BusFault_Handler</a><BR>
 <LI><a href="#[6d]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6d]">UsageFault_Handler</a><BR>
 <LI><a href="#[6f]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6f]">DebugMon_Handler</a><BR>
 <LI><a href="#[84]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[84]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[84]">ADC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2e3]">AppTask_AuxComProcess</a> from auxcom.o(.text) referenced from auxcom.o(.text)
 <LI><a href="#[2e1]">AppTask_AuxComProduce</a> from auxcom.o(.text) referenced from auxcom.o(.text)
 <LI><a href="#[269]">AppTask_ModemProcess</a> from momiprotocol.o(.text) referenced from momiprotocol.o(.text)
 <LI><a href="#[268]">AppTask_ModemProduce</a> from momiprotocol.o(.text) referenced from momiprotocol.o(.text)
 <LI><a href="#[16d]">AppThread_Can1Recv</a> from can.o(.text) referenced from can.o(.text)
 <LI><a href="#[172]">AppThread_Can2Recv</a> from can.o(.text) referenced from can.o(.text)
 <LI><a href="#[145]">AppThread_Collect</a> from collect.o(.text) referenced from collect.o(.text)
 <LI><a href="#[239]">AppThread_PcDebug</a> from pcdebug.o(.text) referenced from pcdebug.o(.text)
 <LI><a href="#[e0]">AppThread_Start</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[2a3]">AppThread_iCloud</a> from icloud_machine.o(.text) referenced from icloud_machine.o(.text)
 <LI><a href="#[6c]">BusFault_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[86]">CAN1_RX0_IRQHandler</a> from canhw.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[87]">CAN1_RX1_IRQHandler</a> from canhw.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[88]">CAN1_SCE_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[85]">CAN1_TX_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[b2]">CAN2_RX0_IRQHandler</a> from canhw.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[b3]">CAN2_RX1_IRQHandler</a> from canhw.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[b4]">CAN2_SCE_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[b1]">CAN2_TX_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[c1]">CRYP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[c0]">DCMI_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[7d]">DMA1_Stream0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[7e]">DMA1_Stream1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[7f]">DMA1_Stream2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[80]">DMA1_Stream3_IRQHandler</a> from momihw.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[81]">DMA1_Stream4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[82]">DMA1_Stream5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[83]">DMA1_Stream6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[a1]">DMA1_Stream7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[aa]">DMA2_Stream0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[ab]">DMA2_Stream1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[ac]">DMA2_Stream2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[ad]">DMA2_Stream3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[ae]">DMA2_Stream4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[b6]">DMA2_Stream5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[b7]">DMA2_Stream6_IRQHandler</a> from auxcomhw.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[b8]">DMA2_Stream7_IRQHandler</a> from pcdebughw.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6f]">DebugMon_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[af]">ETH_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[b0]">ETH_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[78]">EXTI0_IRQHandler</a> from collecthw.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[9a]">EXTI15_10_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[79]">EXTI1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[7a]">EXTI2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[7b]">EXTI3_IRQHandler</a> from collecthw.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[7c]">EXTI4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[89]">EXTI9_5_IRQHandler</a> from collecthw.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[76]">FLASH_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[a2]">FSMC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[c2]">HASH_RNG_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6a]">HardFault_Handler</a> from hardfaulthandler_1.o(OSKERNEL) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[92]">I2C1_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[91]">I2C1_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[94]">I2C2_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[93]">I2C2_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[bb]">I2C3_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[ba]">I2C3_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[0]">LVC_ProcessCanMsg_Default</a> from lvc.o(.text) referenced 2 times from lvc.o(.data)
 <LI><a href="#[0]">LVC_ProcessCanMsg_Default</a> from lvc.o(.text) referenced from lvc.o(.text)
 <LI><a href="#[1b0]">LVC_ProcessCanMsg_LTC</a> from lvc.o(.text) referenced from lvc.o(.text)
 <LI><a href="#[1]">LVC_ProduceCanMsg_Default</a> from lvc.o(.text) referenced 2 times from lvc.o(.data)
 <LI><a href="#[1]">LVC_ProduceCanMsg_Default</a> from lvc.o(.text) referenced from lvc.o(.text)
 <LI><a href="#[1b2]">LVC_ProduceCanMsg_LTC</a> from lvc.o(.text) referenced from lvc.o(.text)
 <LI><a href="#[6b]">MemManage_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[69]">NMI_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[b5]">OTG_FS_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[9c]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[bd]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[bc]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[bf]">OTG_HS_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[be]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[73]">PVD_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[70]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[77]">RCC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[9b]">RTC_Alarm_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[75]">RTC_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[68]">Reset_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[a3]">SDIO_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[95]">SPI1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[96]">SPI2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[a5]">SPI3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6e]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[71]">SysTick_Handler</a> from cmsis_os2.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[c4]">SystemInit</a> from system_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(.text)
 <LI><a href="#[74]">TAMP_STAMP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[8a]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[8d]">TIM1_CC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[8c]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[8b]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[8e]">TIM2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[8f]">TIM3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[90]">TIM4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[a4]">TIM5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[a8]">TIM6_DAC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[a9]">TIM7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[9d]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[a0]">TIM8_CC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[9f]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[9e]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[d4]">TimerCallback</a> from cmsis_os2.o(.text) referenced from cmsis_os2.o(.text)
 <LI><a href="#[a6]">UART4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[a7]">UART5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[97]">USART1_IRQHandler</a> from pcdebughw.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[98]">USART2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[99]">USART3_IRQHandler</a> from momihw.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[b9]">USART6_IRQHandler</a> from auxcomhw.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6d]">UsageFault_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[72]">WWDG_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[c5]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f2xx.o(.text)
 <LI><a href="#[d8]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[5]">erase</a> from fal.o(.text) referenced 2 times from fal.o(.data)
 <LI><a href="#[c6]">fdb_lock</a> from parameters.o(.text) referenced from parameters.o(.text)
 <LI><a href="#[c7]">fdb_unlock</a> from parameters.o(.text) referenced from parameters.o(.text)
 <LI><a href="#[ca]">iKVDB_AllocKvCb</a> from flashdb.o(.text) referenced from flashdb.o(.text)
 <LI><a href="#[ce]">iKVDB_CheckAndRecoveryGcCb</a> from flashdb.o(.text) referenced from flashdb.o(.text)
 <LI><a href="#[cf]">iKVDB_CheckAndRecoveryKvCb</a> from flashdb.o(.text) referenced from flashdb.o(.text)
 <LI><a href="#[cd]">iKVDB_CheckSecHdrCb</a> from flashdb.o(.text) referenced from flashdb.o(.text)
 <LI><a href="#[cc]">iKVDB_DoGc</a> from flashdb.o(.text) referenced from flashdb.o(.text)
 <LI><a href="#[c8]">iKVDB_FindKvCb</a> from flashdb.o(.text) referenced from flashdb.o(.text)
 <LI><a href="#[cb]">iKVDB_GcCheckCb</a> from flashdb.o(.text) referenced from flashdb.o(.text)
 <LI><a href="#[d0]">iKVDB_PrintKvCb</a> from flashdb.o(.text) referenced from flashdb.o(.text)
 <LI><a href="#[c9]">iKVDB_SentorStatisticsCb</a> from flashdb.o(.text) referenced from flashdb.o(.text)
 <LI><a href="#[63]">iM2m_AnalyzeTlvMsg_A510</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[64]">iM2m_AnalyzeTlvMsg_A511</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[d3]">iTSDB_CheckSecHdrCb</a> from flashdb.o(.text) referenced from flashdb.o(.text)
 <LI><a href="#[d1]">iTSDB_FormatAllCb</a> from flashdb.o(.text) referenced from flashdb.o(.text)
 <LI><a href="#[d2]">iTSDB_QueryCountCb</a> from flashdb.o(.text) referenced from flashdb.o(.text)
 <LI><a href="#[7]">im2m_AnalyzeTlvMsg_0000</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[a]">im2m_AnalyzeTlvMsg_0002</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[c]">im2m_AnalyzeTlvMsg_0003</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[e]">im2m_AnalyzeTlvMsg_0004</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[10]">im2m_AnalyzeTlvMsg_0005</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[12]">im2m_AnalyzeTlvMsg_0006</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[14]">im2m_AnalyzeTlvMsg_0007</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[16]">im2m_AnalyzeTlvMsg_0008</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[18]">im2m_AnalyzeTlvMsg_0009</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[1a]">im2m_AnalyzeTlvMsg_000A</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[1c]">im2m_AnalyzeTlvMsg_000B</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[1e]">im2m_AnalyzeTlvMsg_000C</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[20]">im2m_AnalyzeTlvMsg_0106</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[22]">im2m_AnalyzeTlvMsg_0107</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[24]">im2m_AnalyzeTlvMsg_0108</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[26]">im2m_AnalyzeTlvMsg_010B</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[28]">im2m_AnalyzeTlvMsg_010C</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[2a]">im2m_AnalyzeTlvMsg_010D</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[2c]">im2m_AnalyzeTlvMsg_0110</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[2e]">im2m_AnalyzeTlvMsg_0111</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[30]">im2m_AnalyzeTlvMsg_0113</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[32]">im2m_AnalyzeTlvMsg_0114</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[34]">im2m_AnalyzeTlvMsg_0115</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[36]">im2m_AnalyzeTlvMsg_0116</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[38]">im2m_AnalyzeTlvMsg_0117</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[3a]">im2m_AnalyzeTlvMsg_0118</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[3c]">im2m_AnalyzeTlvMsg_0119</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[3e]">im2m_AnalyzeTlvMsg_011A</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[40]">im2m_AnalyzeTlvMsg_0201</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[42]">im2m_AnalyzeTlvMsg_0202</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[44]">im2m_AnalyzeTlvMsg_0203</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[46]">im2m_AnalyzeTlvMsg_0204</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[48]">im2m_AnalyzeTlvMsg_0205</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[4a]">im2m_AnalyzeTlvMsg_0206</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[4c]">im2m_AnalyzeTlvMsg_020A</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[4e]">im2m_AnalyzeTlvMsg_020B</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[4f]">im2m_AnalyzeTlvMsg_1002</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[50]">im2m_AnalyzeTlvMsg_1003</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[52]">im2m_AnalyzeTlvMsg_1005</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[54]">im2m_AnalyzeTlvMsg_100C</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[55]">im2m_AnalyzeTlvMsg_100E</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[57]">im2m_AnalyzeTlvMsg_2000</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[59]">im2m_AnalyzeTlvMsg_2001</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[5b]">im2m_AnalyzeTlvMsg_2002</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[5d]">im2m_AnalyzeTlvMsg_3016</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[5e]">im2m_AnalyzeTlvMsg_4000</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[5f]">im2m_AnalyzeTlvMsg_4001</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[60]">im2m_AnalyzeTlvMsg_4004</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[61]">im2m_AnalyzeTlvMsg_4008</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[62]">im2m_AnalyzeTlvMsg_4FFF</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[66]">im2m_AnalyzeTlvMsg_A1FE</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[67]">im2m_AnalyzeTlvMsg_A1FF</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[6]">im2m_BuildTlvMsg_0000</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[8]">im2m_BuildTlvMsg_0001</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[9]">im2m_BuildTlvMsg_0002</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[b]">im2m_BuildTlvMsg_0003</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[d]">im2m_BuildTlvMsg_0004</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[f]">im2m_BuildTlvMsg_0005</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[11]">im2m_BuildTlvMsg_0006</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[13]">im2m_BuildTlvMsg_0007</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[15]">im2m_BuildTlvMsg_0008</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[17]">im2m_BuildTlvMsg_0009</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[19]">im2m_BuildTlvMsg_000A</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[1b]">im2m_BuildTlvMsg_000B</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[1d]">im2m_BuildTlvMsg_000C</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[1f]">im2m_BuildTlvMsg_0106</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[21]">im2m_BuildTlvMsg_0107</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[23]">im2m_BuildTlvMsg_0108</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[25]">im2m_BuildTlvMsg_010B</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[27]">im2m_BuildTlvMsg_010C</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[29]">im2m_BuildTlvMsg_010D</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[2b]">im2m_BuildTlvMsg_0110</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[2d]">im2m_BuildTlvMsg_0111</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[2f]">im2m_BuildTlvMsg_0113</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[31]">im2m_BuildTlvMsg_0114</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[33]">im2m_BuildTlvMsg_0115</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[35]">im2m_BuildTlvMsg_0116</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[37]">im2m_BuildTlvMsg_0117</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[39]">im2m_BuildTlvMsg_0118</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[3b]">im2m_BuildTlvMsg_0119</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[3d]">im2m_BuildTlvMsg_011A</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[3f]">im2m_BuildTlvMsg_0201</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[41]">im2m_BuildTlvMsg_0202</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[43]">im2m_BuildTlvMsg_0203</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[45]">im2m_BuildTlvMsg_0204</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[47]">im2m_BuildTlvMsg_0205</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[49]">im2m_BuildTlvMsg_0206</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[4b]">im2m_BuildTlvMsg_020A</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[4d]">im2m_BuildTlvMsg_020B</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[51]">im2m_BuildTlvMsg_1005</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[53]">im2m_BuildTlvMsg_100C</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[56]">im2m_BuildTlvMsg_2000</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[58]">im2m_BuildTlvMsg_2001</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[5a]">im2m_BuildTlvMsg_2002</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[5c]">im2m_BuildTlvMsg_3016</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[65]">im2m_BuildTlvMsg_A1FE</a> from m2mprotocol.o(.text) referenced 2 times from m2mprotocol.o(.data)
 <LI><a href="#[2]">init</a> from fal.o(.text) referenced 2 times from fal.o(.data)
 <LI><a href="#[c3]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[d6]">prvIdleTask</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[d5]">prvTaskExitError</a> from port.o(.text) referenced from port.o(.text)
 <LI><a href="#[d7]">prvTimerTask</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[3]">read</a> from fal.o(.text) referenced 2 times from fal.o(.data)
 <LI><a href="#[dc]">retry_delay_100us</a> from sfud.o(.text) referenced from sfud.o(.text)
 <LI><a href="#[da]">spi_lock</a> from sfud.o(.text) referenced from sfud.o(.text)
 <LI><a href="#[db]">spi_unlock</a> from sfud.o(.text) referenced from sfud.o(.text)
 <LI><a href="#[d9]">spi_write_read</a> from sfud.o(.text) referenced from sfud.o(.text)
 <LI><a href="#[35f]">vEventGroupClearBitsCallback</a> from event_groups.o(.text) referenced from event_groups.o(.text)
 <LI><a href="#[361]">vEventGroupSetBitsCallback</a> from event_groups.o(.text) referenced from event_groups.o(.text)
 <LI><a href="#[4]">write</a> from fal.o(.text) referenced 2 times from fal.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c5]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(.text)
</UL>
<P><STRONG><a name="[3eb]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[dd]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3b2]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3ec]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3ed]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3ee]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3ef]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[3f0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6e]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[366]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[70]"></a>PendSV_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3f1]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[3b3]"></a>HardFaultHandler</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, hardfaulthandler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[e0]"></a>AppThread_Start</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = AppThread_Start &rArr; Parm_FlashDbInit &rArr; FlashDB_KvdbInit &rArr; iKVDB_KvLoad &rArr; FlashDB_KvSetDefault &rArr; iKVDB_CreatKvBlob &rArr; iKVDB_NewKv &rArr; iKVDB_AllocKv &rArr; iKVDB_SentorIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_state_machine
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_initialize
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_init (via Veneer)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_Initialize
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCloud_ServiceStart
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCloud_ServiceInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_ServiceStart
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_ServiceInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_FlashDbInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Momi_ServiceStart
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Momi_ServiceInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_ServiceStart
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_ServiceInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_ServiceStart
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_ServiceInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCom_ServiceStart
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCom_ServiceInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[f3]"></a>IWDG_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_Initialize
</UL>

<P><STRONG><a name="[f9]"></a>gpio_Initialize</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gpio_Initialize &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_Initialize
</UL>

<P><STRONG><a name="[fc]"></a>system_Initialize</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = system_Initialize &rArr; gpio_Initialize &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_Initialize
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>main</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = main &rArr; osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[3f2]"></a>delay_ms</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>delay_us</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_write_byte
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_wait_ack
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_stop
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_start
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_restart
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_read_byte
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_not_ack
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_ack
</UL>

<P><STRONG><a name="[68]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(.text)
</UL>
<P><STRONG><a name="[100]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, system_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>adc_nb_sample_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, collecthw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initialize
</UL>

<P><STRONG><a name="[105]"></a>ADC_Initialize</STRONG> (Thumb, 292 bytes, Stack size 112 bytes, collecthw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ADC_Initialize &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_nb_sample_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectHw_Init
</UL>

<P><STRONG><a name="[132]"></a>adc_push_dma_sample</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, collecthw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_push_dma_sample
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_Do100msTasks
</UL>

<P><STRONG><a name="[113]"></a>RTC_WAKE_UP_GPIO_EXTI_Initialize</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, collecthw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_WAKE_UP_GPIO_EXTI_Initialize &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectHw_Init
</UL>

<P><STRONG><a name="[78]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, collecthw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3f3]"></a>Openbox_GPIO_EXTI_Initialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, collecthw.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, collecthw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tbox_ResetSleepTime
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>RING_WAKE_GPIO_EXTI_Initialize</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, collecthw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init (via Veneer)
</UL>

<P><STRONG><a name="[11b]"></a>ACC_IN_GPIO_EXTI_Initialize</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, collecthw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ACC_IN_GPIO_EXTI_Initialize &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectHw_Init
</UL>

<P><STRONG><a name="[89]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, collecthw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tbox_ResetSleepTime
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>CollectHw_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, collecthw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = CollectHw_Init &rArr; ADC_Initialize &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IN_GPIO_EXTI_Initialize
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WAKE_UP_GPIO_EXTI_Initialize
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_ServiceInit
</UL>

<P><STRONG><a name="[135]"></a>COLT_CheckBatteryStatus</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_Do1sTasks
</UL>

<P><STRONG><a name="[136]"></a>COLT_CheckMainPowerStatus</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_Do1sTasks
</UL>

<P><STRONG><a name="[137]"></a>COLT_ControlBatteryCharge</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_Do1sTasks
</UL>

<P><STRONG><a name="[11e]"></a>COLT_GetAccStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_CheckAccOffEvent
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Momi_ProduceSendMsg
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_ProduceCanMsg_LTC
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxStsEngine_StateMachine
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_CheckCommState
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_working
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tbox_CheckPowerOffMachine
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iM2m_AnalyzeTlvMsg_A511
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iM2m_AnalyzeTlvMsg_A510
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildDeviceStatus
</UL>

<P><STRONG><a name="[11d]"></a>COLT_CheckAccOffEvent</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = COLT_CheckAccOffEvent &rArr; PcDebug_SendString &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetAccStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_Do100msTasks
</UL>

<P><STRONG><a name="[133]"></a>COLT_CheckAccStatus</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_Do100msTasks
</UL>

<P><STRONG><a name="[3f4]"></a>COLT_GetMicroTemperature</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, collect.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>COLT_GetGpsAntennaStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_ManageLedStatus
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_CheckPassiveState
</UL>

<P><STRONG><a name="[122]"></a>COLT_Get4gGpsStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_CorrectRtcStatus
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_ManageLedStatus
</UL>

<P><STRONG><a name="[121]"></a>COLT_GetGpsPositioningStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_ManageLedStatus
</UL>

<P><STRONG><a name="[120]"></a>COLT_ManageLedStatus</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COLT_ManageLedStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_GetRecvState
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_GetRecvState
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetGpsPositioningStatus
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_Get4gGpsStatus
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetGpsAntennaStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_Do1sTasks
</UL>

<P><STRONG><a name="[126]"></a>COLT_CheckGpsAntennaIsOk</STRONG> (Thumb, 388 bytes, Stack size 8 bytes, collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = COLT_CheckGpsAntennaIsOk &rArr; PcDebug_SendString &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_Do1sTasks
</UL>

<P><STRONG><a name="[127]"></a>COLT_CumulateOfflineTimeInWork</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = COLT_CumulateOfflineTimeInWork &rArr; Parm_SaveTboxOfflineTime &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveTboxOfflineTime
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTL_Do1sTasks
</UL>

<P><STRONG><a name="[29d]"></a>COLT_CumulateOfflineTimeInSleep</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
</UL>

<P><STRONG><a name="[271]"></a>COLT_GetBoxOpenStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildDeviceStatus
</UL>

<P><STRONG><a name="[24a]"></a>COLT_GetMainPowerVoltage</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildAdSwitch
</UL>

<P><STRONG><a name="[24b]"></a>COLT_GetBatVoltage</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildAdSwitch
</UL>

<P><STRONG><a name="[26f]"></a>COLT_GetBatLowStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildDeviceStatus
</UL>

<P><STRONG><a name="[26e]"></a>COLT_GetBatChargeStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildDeviceStatus
</UL>

<P><STRONG><a name="[26c]"></a>COLT_GetMainPowerStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildDeviceStatus
</UL>

<P><STRONG><a name="[26d]"></a>COLT_GetMainPowerLowStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildDeviceStatus
</UL>

<P><STRONG><a name="[1b3]"></a>COLT_GetMainPowerFullStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_ProduceCanMsg_LTC
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iM2m_AnalyzeTlvMsg_A511
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iM2m_AnalyzeTlvMsg_A510
</UL>

<P><STRONG><a name="[3f5]"></a>COLT_GetGpsAntShortStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, collect.o(.text), UNUSED)

<P><STRONG><a name="[3f6]"></a>COLT_GetGpsAntOpenStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, collect.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>COLT_GetSimCardStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_CheckPassiveState
</UL>

<P><STRONG><a name="[24c]"></a>COLT_GetSwitch1Status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildAdSwitch
</UL>

<P><STRONG><a name="[24d]"></a>COLT_GetSwitch2Status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildAdSwitch
</UL>

<P><STRONG><a name="[24e]"></a>COLT_GetSwitch3Status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildAdSwitch
</UL>

<P><STRONG><a name="[270]"></a>COLT_GetVehicleTowingStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildDeviceStatus
</UL>

<P><STRONG><a name="[129]"></a>COLT_ReadInternalWdtState</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COLT_ReadInternalWdtState
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetUser (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCloud_ServiceInit
</UL>

<P><STRONG><a name="[273]"></a>COLT_GetTotalWorkTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildTlvMsg_3016
</UL>

<P><STRONG><a name="[274]"></a>COLT_SetTotalWorkTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeTlvMsg_3016
</UL>

<P><STRONG><a name="[3f7]"></a>COLT_InitTotalWorkTime</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, collect.o(.text), UNUSED)

<P><STRONG><a name="[3f8]"></a>COLT_CumulateTotalWorkTime</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, collect.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>CTL_SetRestartDelayTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeTlvMsg_4001
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeTlvMsg_4000
</UL>

<P><STRONG><a name="[27a]"></a>CTL_SetPwroffDelayTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeTlvMsg_4008
</UL>

<P><STRONG><a name="[12b]"></a>CTL_Do1sTasks</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CTL_Do1sTasks &rArr; COLT_CumulateOfflineTimeInWork &rArr; Parm_SaveTboxOfflineTime &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_PswControl
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_CumulateOfflineTimeInWork
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do1sTasks
</UL>

<P><STRONG><a name="[12e]"></a>COLT_GetRtcStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_CorrectRtcStatus
</UL>

<P><STRONG><a name="[12f]"></a>COLT_SetRtcStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do1hourTasks
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_CorrectRtcStatus
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_ServiceInit
</UL>

<P><STRONG><a name="[12d]"></a>COLT_CorrectRtcStatus</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = COLT_CorrectRtcStatus &rArr; RTC_CorrectTime &rArr; am18x5_SetDateTime &rArr; am18x5_SetTime &rArr; am1805_burst_write &rArr; mcu_i2c_write &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CorrectTime
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_SetRtcStatus
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetRtcStatus
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_Get4gGpsStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_Do1sTasks
</UL>

<P><STRONG><a name="[131]"></a>COLT_Do100msTasks</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = COLT_Do100msTasks &rArr; COLT_CheckAccOffEvent &rArr; PcDebug_SendString &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_CheckAccStatus
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_CheckAccOffEvent
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_push_dma_sample
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do100msTasks
</UL>

<P><STRONG><a name="[134]"></a>COLT_Do1sTasks</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = COLT_Do1sTasks &rArr; COLT_CorrectRtcStatus &rArr; RTC_CorrectTime &rArr; am18x5_SetDateTime &rArr; am18x5_SetTime &rArr; am1805_burst_write &rArr; mcu_i2c_write &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_CorrectRtcStatus
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_CheckGpsAntennaIsOk
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_ManageLedStatus
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_ControlBatteryCharge
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_CheckMainPowerStatus
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_CheckBatteryStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do1sTasks
</UL>

<P><STRONG><a name="[147]"></a>TIM_InitializeAllTimer</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_ServiceInit
</UL>

<P><STRONG><a name="[146]"></a>do_10ms</STRONG> (Thumb, 408 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Collect
</UL>

<P><STRONG><a name="[138]"></a>Do1hourTasks</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Do1hourTasks
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_SetRtcStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timer_tasks
</UL>

<P><STRONG><a name="[144]"></a>Do1minuteTasks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timer_tasks
</UL>

<P><STRONG><a name="[143]"></a>Do5sTasks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timer_tasks
</UL>

<P><STRONG><a name="[139]"></a>Do1sTasks</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Do1sTasks &rArr; rtcSoft_Update &rArr; RTC_GetBjTime &rArr; am18x5_GetDateTime &rArr; am18x5_GetTime &rArr; am1805_burst_read &rArr; mcu_i2c_read &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcSoft_Update
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Do1sTasks
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_Do1sTasks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTL_Do1sTasks
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timer_tasks
</UL>

<P><STRONG><a name="[13c]"></a>Do100msTasks</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Do100msTasks &rArr; COLT_Do100msTasks &rArr; COLT_CheckAccOffEvent &rArr; PcDebug_SendString &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Do100msTasks
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_Do100msTasks
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timer_tasks
</UL>

<P><STRONG><a name="[13e]"></a>Do10msTasks</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Do10msTasks &rArr; led_state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcSoft_Run
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_state_machine
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Do10msTasks
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timer_tasks
</UL>

<P><STRONG><a name="[142]"></a>check_timer_tasks</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = check_timer_tasks &rArr; Do1sTasks &rArr; rtcSoft_Update &rArr; RTC_GetBjTime &rArr; am18x5_GetDateTime &rArr; am18x5_GetTime &rArr; am1805_burst_read &rArr; mcu_i2c_read &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do10msTasks
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do100msTasks
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do1sTasks
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do5sTasks
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do1minuteTasks
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do1hourTasks
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Collect
</UL>

<P><STRONG><a name="[145]"></a>AppThread_Collect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AppThread_Collect &rArr; check_timer_tasks &rArr; Do1sTasks &rArr; rtcSoft_Update &rArr; RTC_GetBjTime &rArr; am18x5_GetDateTime &rArr; am18x5_GetTime &rArr; am1805_burst_read &rArr; mcu_i2c_read &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_timer_tasks
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_10ms
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> collect.o(.text)
</UL>
<P><STRONG><a name="[e9]"></a>Collect_ServiceInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Collect_ServiceInit &rArr; Parm_ReadTboxOfflineTime &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadTboxOfflineTime
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InitializeAllTimer
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_SetRtcStatus
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CollectHw_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Start
</UL>

<P><STRONG><a name="[ee]"></a>Collect_ServiceStart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, collect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Collect_ServiceStart &rArr; osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Start
</UL>

<P><STRONG><a name="[15a]"></a>Can_AddFrameToBuffer</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, canhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Can_AddFrameToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_FilterFrame
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_FilterFrame
</UL>

<P><STRONG><a name="[149]"></a>CAN_GpioInitialize</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, canhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_GpioInitialize &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_ServiceInit
</UL>

<P><STRONG><a name="[14a]"></a>CAN_Initialize</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, canhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CAN_Initialize &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_msg_queue_reset
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig (via Veneer)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_ServiceInit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_CheckCommState
</UL>

<P><STRONG><a name="[153]"></a>CAN1_TransmitData</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, canhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN1_TransmitData &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_ProcessRecvMsg
</UL>

<P><STRONG><a name="[155]"></a>CAN1_ReceiveMessage</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, canhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CAN1_ReceiveMessage &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Can1Recv
</UL>

<P><STRONG><a name="[157]"></a>CAN2_TransmitData</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, canhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN2_TransmitData &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_SendCmd_LTC
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_SendHbCmd_LTC
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_ProcessRecvMsg
</UL>

<P><STRONG><a name="[158]"></a>CAN2_ReceiveMessage</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, canhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CAN2_ReceiveMessage &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Can2Recv
</UL>

<P><STRONG><a name="[159]"></a>CAN1_FilterFrame</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, canhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CAN1_FilterFrame &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_msg_queue_push
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_AddFrameToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, canhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; CAN1_FilterFrame &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_FilterFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, canhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CAN1_RX1_IRQHandler &rArr; CAN1_FilterFrame &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_FilterFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[160]"></a>CAN2_FilterFrame</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, canhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CAN2_FilterFrame &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_msg_queue_push
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_AddFrameToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, canhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; CAN2_FilterFrame &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_FilterFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, canhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CAN2_RX1_IRQHandler &rArr; CAN2_FilterFrame &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_FilterFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[161]"></a>Can_CheckCommState</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Can_CheckCommState &rArr; CAN_Initialize &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetAccStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Do1sTasks
</UL>

<P><STRONG><a name="[179]"></a>iCan_DebounceRecvState</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Do100msTasks
</UL>

<P><STRONG><a name="[3f9]"></a>DTC_GetNewFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[3fa]"></a>DTC_ClearNewFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>DTC_SaveCode</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCan_ProcessDtcMsg_J1939
</UL>

<P><STRONG><a name="[17b]"></a>DTC_DebounceCode</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Do1sTasks
</UL>

<P><STRONG><a name="[3fb]"></a>DTC_GetCode</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[3fc]"></a>DTC_GetTotalNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>iCan_ProcessDtcMsg_J1939</STRONG> (Thumb, 558 bytes, Stack size 40 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTC_SaveCode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[165]"></a>CAN_ResetObdToDefault</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[3fd]"></a>CAN_ResetFrameTable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[3fe]"></a>CAN_ProduceSendMsg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>can_msg_queue_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_ServiceInit
</UL>

<P><STRONG><a name="[15b]"></a>can_msg_queue_push</STRONG> (Thumb, 252 bytes, Stack size 12 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = can_msg_queue_push
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_FilterFrame
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_FilterFrame
</UL>

<P><STRONG><a name="[168]"></a>CAN1_ProcessRecvMsg</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CAN1_ProcessRecvMsg &rArr; CAN_ProcessRecvEngineMsg_AG &rArr; CAN_ProcessCiMsg &rArr; PcDebug_SendString &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TransmitData
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ProcessRecvEngineMsg_AG
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ProcessRecvEngineMsg_AC
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ProcessRecvDownMsg_AG
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ProcessRecvDownMsg_AC
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Can1Recv
</UL>

<P><STRONG><a name="[16d]"></a>AppThread_Can1Recv</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = AppThread_Can1Recv &rArr; CAN1_ProcessRecvMsg &rArr; CAN_ProcessRecvEngineMsg_AG &rArr; CAN_ProcessCiMsg &rArr; PcDebug_SendString &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_msg_queue_size
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_msg_queue_pop
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_ReceiveMessage
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_ProcessRecvMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[170]"></a>CAN2_ProcessRecvMsg</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CAN2_ProcessRecvMsg &rArr; CAN2_TransmitData &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TransmitData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ProcessRecvUpMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Can2Recv
</UL>

<P><STRONG><a name="[172]"></a>AppThread_Can2Recv</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AppThread_Can2Recv &rArr; CAN2_ReceiveMessage &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_msg_queue_size
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_msg_queue_pop
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_ReceiveMessage
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_ProcessRecvMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[e6]"></a>Can_ServiceInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = Can_ServiceInit &rArr; ZxStsEngine_Initialize &rArr; ZxStsEngine_ReadDataFromFdb &rArr; Parm_ReadZxEngineUpStsInfo &rArr; FalshDB_KvGetBlob &rArr; iKVDB_GetKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_msg_queue_reset
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GpioInitialize
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxSts_Initialize
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxStsEngine_Initialize
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TboxSts_Initialize
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadPidInfo
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadLvcInfo
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Start
</UL>

<P><STRONG><a name="[ef]"></a>Can_ServiceStart</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Can_ServiceStart &rArr; osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Start
</UL>

<P><STRONG><a name="[141]"></a>Can_Do10msTasks</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Can_Do10msTasks
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do10msTasks
</UL>

<P><STRONG><a name="[13d]"></a>Can_Do100msTasks</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Can_Do100msTasks &rArr; ZxSts_StateMachine
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxSts_StateMachine
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCan_DebounceRecvState
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do100msTasks
</UL>

<P><STRONG><a name="[13a]"></a>Can_Do1sTasks</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Can_Do1sTasks &rArr; Can_CheckCommState &rArr; CAN_Initialize &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxStsEngine_StateMachine
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTC_DebounceCode
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_CheckCommState
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do1sTasks
</UL>

<P><STRONG><a name="[17f]"></a>CAN1_GetCommState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildAdSwitch
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iZxm2m_UpdateTlvMsg_A501
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildDeviceStatus
</UL>

<P><STRONG><a name="[17e]"></a>CAN2_GetCommState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildAdSwitch
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iZxm2m_UpdateTlvMsg_A501
</UL>

<P><STRONG><a name="[124]"></a>CAN1_GetRecvState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_ManageLedStatus
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildAdSwitch
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_working
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iM2m_AnalyzeTlvMsg_A511
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iM2m_AnalyzeTlvMsg_A510
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildDeviceStatus
</UL>

<P><STRONG><a name="[125]"></a>CAN2_GetRecvState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_ManageLedStatus
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildAdSwitch
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_ProduceCanMsg_LTC
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_working
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iM2m_AnalyzeTlvMsg_A511
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iM2m_AnalyzeTlvMsg_A510
</UL>

<P><STRONG><a name="[3ff]"></a>CAN_GetVinState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>CAN_GetObdVinState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iZxm2m_UpdateTlvMsg_A501
</UL>

<P><STRONG><a name="[400]"></a>CAN_GetUserVinState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>CAN_GetCiCodeState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iZxm2m_UpdateTlvMsg_A501
</UL>

<P><STRONG><a name="[401]"></a>CAN_GetEngineType</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[402]"></a>CAN_GetEngineSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>CAN_GetDwEngineState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iZxm2m_UpdateTlvMsg_A501
</UL>

<P><STRONG><a name="[180]"></a>CAN_GetUpEngineState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iZxm2m_UpdateTlvMsg_A501
</UL>

<P><STRONG><a name="[19a]"></a>CAN_GetUpEngineTwt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxStsEngine_StateMachine
</UL>

<P><STRONG><a name="[19c]"></a>CAN_GetDownEngineTwt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxStsEngine_StateMachine
</UL>

<P><STRONG><a name="[19b]"></a>CAN_GetUpEngineTfc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxStsEngine_StateMachine
</UL>

<P><STRONG><a name="[19d]"></a>CAN_GetDownEngineTfc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxStsEngine_StateMachine
</UL>

<P><STRONG><a name="[26a]"></a>ZxM2m_InitTlvData</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, tcw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Momi_ServiceInit
</UL>

<P><STRONG><a name="[17d]"></a>iZxm2m_UpdateTlvMsg_A501</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, tcw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iZxm2m_UpdateTlvMsg_A501
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_LockByUser
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_LockBySimCard
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_LockByOffline
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_LockByGpsAnt
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_GetGpsLockStatus
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_GetGpsBindStatus
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_GetEcuLockStatus
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_GetEcuBindStatus
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetUpEngineState
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetDwEngineState
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetCiCodeState
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetObdVinState
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_GetCommState
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_GetCommState
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildTlvMsg_F001
</UL>

<P><STRONG><a name="[251]"></a>iZxm2m_UpdateTlvMsg_A504</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tcw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildTlvMsg_F001
</UL>

<P><STRONG><a name="[18c]"></a>ZxSts_ResetCanMsgTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ProcessRecvUpMsg
</UL>

<P><STRONG><a name="[171]"></a>CAN_ProcessRecvUpMsg</STRONG> (Thumb, 10914 bytes, Stack size 24 bytes, tcw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_ProcessRecvUpMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxSts_ResetCanMsgTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_ProcessRecvMsg
</UL>

<P><STRONG><a name="[169]"></a>CAN_ProcessRecvDownMsg_AC</STRONG> (Thumb, 2254 bytes, Stack size 12 bytes, tcw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_ProcessRecvDownMsg_AC
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_ProcessRecvMsg
</UL>

<P><STRONG><a name="[16b]"></a>CAN_ProcessRecvDownMsg_AG</STRONG> (Thumb, 4260 bytes, Stack size 12 bytes, tcw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_ProcessRecvDownMsg_AG
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_ProcessRecvMsg
</UL>

<P><STRONG><a name="[18f]"></a>CAN_ProcessCiMsg</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, tcw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CAN_ProcessCiMsg &rArr; PcDebug_SendString &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ProcessRecvEngineMsg_AG
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ProcessRecvEngineMsg_AC
</UL>

<P><STRONG><a name="[16a]"></a>CAN_ProcessRecvEngineMsg_AC</STRONG> (Thumb, 4438 bytes, Stack size 24 bytes, tcw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CAN_ProcessRecvEngineMsg_AC &rArr; CAN_ProcessCiMsg &rArr; PcDebug_SendString &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ProcessCiMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_ProcessRecvMsg
</UL>

<P><STRONG><a name="[16c]"></a>CAN_ProcessRecvEngineMsg_AG</STRONG> (Thumb, 3946 bytes, Stack size 24 bytes, tcw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CAN_ProcessRecvEngineMsg_AG &rArr; CAN_ProcessCiMsg &rArr; PcDebug_SendString &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ProcessCiMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_ProcessRecvMsg
</UL>

<P><STRONG><a name="[403]"></a>ZxSts_SetNumberFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcw.o(.text), UNUSED)

<P><STRONG><a name="[404]"></a>ZxSts_SetStartFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcw.o(.text), UNUSED)

<P><STRONG><a name="[405]"></a>ZxSts_SetStopFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcw.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>ZxSts_Accumulate</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, tcw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxSts_AccumulateAll
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxSts_StateMachine
</UL>

<P><STRONG><a name="[190]"></a>ZxSts_AccumulateAll</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, tcw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxSts_Accumulate
</UL>

<P><STRONG><a name="[192]"></a>ZxSts_ServiceInput</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, tcw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxSts_StateMachine
</UL>

<P><STRONG><a name="[17a]"></a>ZxSts_StateMachine</STRONG> (Thumb, 854 bytes, Stack size 4 bytes, tcw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ZxSts_StateMachine
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxSts_ServiceInput
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxSts_Accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Do100msTasks
</UL>

<P><STRONG><a name="[198]"></a>ZxSts_UpdateDataBuffer</STRONG> (Thumb, 2504 bytes, Stack size 0 bytes, tcw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxSts_SaveDataToFdb
</UL>

<P><STRONG><a name="[193]"></a>ZxSts_ReadDataFromFdb</STRONG> (Thumb, 1732 bytes, Stack size 16 bytes, tcw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadZxStsTmrInfo
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadZxStsInfo
</UL>

<P><STRONG><a name="[196]"></a>ZxSts_SaveDataToFdb</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = ZxSts_SaveDataToFdb &rArr; Parm_SaveZxStsTmrInfo &rArr; FlashDB_KvSetBlob &rArr; iKVDB_SetKv &rArr; iKVDB_DelKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveZxStsTmrInfo
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveZxStsInfo
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxSts_UpdateDataBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
</UL>

<P><STRONG><a name="[173]"></a>ZxSts_Initialize</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, tcw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_ServiceInit
</UL>

<P><STRONG><a name="[17c]"></a>ZxStsEngine_StateMachine</STRONG> (Thumb, 1270 bytes, Stack size 16 bytes, tcw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ZxStsEngine_StateMachine
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetAccStatus
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetDownEngineTfc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetUpEngineTfc
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetDownEngineTwt
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetUpEngineTwt
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Do1sTasks
</UL>

<P><STRONG><a name="[1a2]"></a>ZxStsEngine_UpdateDataBuffer</STRONG> (Thumb, 294 bytes, Stack size 0 bytes, tcw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxStsEngine_SaveDataToFdb
</UL>

<P><STRONG><a name="[19e]"></a>ZxStsEngine_ReadDataFromFdb</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, tcw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = ZxStsEngine_ReadDataFromFdb &rArr; Parm_ReadZxEngineUpStsInfo &rArr; FalshDB_KvGetBlob &rArr; iKVDB_GetKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadZxEngineUpStsInfo
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadZxEngineDwStsInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxStsEngine_Initialize
</UL>

<P><STRONG><a name="[1a1]"></a>ZxStsEngine_SaveDataToFdb</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tcw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = ZxStsEngine_SaveDataToFdb &rArr; Parm_SaveZxEngineUpStsInfo &rArr; FlashDB_KvSetBlob &rArr; iKVDB_SetKv &rArr; iKVDB_DelKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveZxEngineUpStsInfo
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveZxEngineDwStsInfo
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxStsEngine_UpdateDataBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
</UL>

<P><STRONG><a name="[174]"></a>ZxStsEngine_Initialize</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, tcw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = ZxStsEngine_Initialize &rArr; ZxStsEngine_ReadDataFromFdb &rArr; Parm_ReadZxEngineUpStsInfo &rArr; FalshDB_KvGetBlob &rArr; iKVDB_GetKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxStsEngine_ReadDataFromFdb
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_ServiceInit
</UL>

<P><STRONG><a name="[1a8]"></a>TboxSts_UpdateDataBuffer</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, tcw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TboxSts_SaveDataToFdb
</UL>

<P><STRONG><a name="[1a5]"></a>TboxSts_ReadDataFromFdb</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, tcw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = TboxSts_ReadDataFromFdb &rArr; Parm_ReadTboxStsInfo &rArr; FalshDB_KvGetBlob &rArr; iKVDB_GetKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadTboxStsInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TboxSts_Initialize
</UL>

<P><STRONG><a name="[1a7]"></a>TboxSts_SaveDataToFdb</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tcw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = TboxSts_SaveDataToFdb &rArr; Parm_SaveTboxStsInfo &rArr; FlashDB_KvSetBlob &rArr; iKVDB_SetKv &rArr; iKVDB_DelKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveTboxStsInfo
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TboxSts_UpdateDataBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
</UL>

<P><STRONG><a name="[29c]"></a>TboxSts_AccumulateTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tcw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
</UL>

<P><STRONG><a name="[175]"></a>TboxSts_Initialize</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tcw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = TboxSts_Initialize &rArr; TboxSts_ReadDataFromFdb &rArr; Parm_ReadTboxStsInfo &rArr; FalshDB_KvGetBlob &rArr; iKVDB_GetKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TboxSts_ReadDataFromFdb
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_ServiceInit
</UL>

<P><STRONG><a name="[1aa]"></a>LVC_ProcessDscCommand</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lvc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LVC_ProcessDscCommand &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iM2m_AnalyzeTlvMsg_A511
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iM2m_AnalyzeTlvMsg_A510
</UL>

<P><STRONG><a name="[1ac]"></a>LVC_CheckPassiveState</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, lvc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LVC_CheckPassiveState &rArr; PcDebug_SendString &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetSimCardStatus
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetGpsAntennaStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_ServicePassive_LTC
</UL>

<P><STRONG><a name="[1ae]"></a>LVC_SendHbCmd_LTC</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lvc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LVC_SendHbCmd_LTC &rArr; CAN2_TransmitData &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TransmitData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_ProduceCanMsg_LTC
</UL>

<P><STRONG><a name="[1af]"></a>LVC_SendCmd_LTC</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lvc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LVC_SendCmd_LTC &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TransmitData
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_ProduceCanMsg_LTC
</UL>

<P><STRONG><a name="[1b0]"></a>LVC_ProcessCanMsg_LTC</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lvc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LVC_ProcessCanMsg_LTC &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvc.o(.text)
</UL>
<P><STRONG><a name="[1b1]"></a>LVC_ServicePassive_LTC</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, lvc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LVC_ServicePassive_LTC &rArr; LVC_CheckPassiveState &rArr; PcDebug_SendString &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_CheckPassiveState
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_ProduceCanMsg_LTC
</UL>

<P><STRONG><a name="[1b2]"></a>LVC_ProduceCanMsg_LTC</STRONG> (Thumb, 678 bytes, Stack size 8 bytes, lvc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LVC_ProduceCanMsg_LTC &rArr; Parm_ReadLvcInfo &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadTboxOfflineTime
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_GetRecvState
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetMainPowerFullStatus
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetAccStatus
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveLvcInfo
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_ServicePassive_LTC
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_SendCmd_LTC
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_SendHbCmd_LTC
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadLvcInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvc.o(.text)
</UL>
<P><STRONG><a name="[0]"></a>LVC_ProcessCanMsg_Default</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lvc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LVC_ProcessCanMsg_Default
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lvc.o(.data)
<LI> lvc.o(.text)
</UL>
<P><STRONG><a name="[1]"></a>LVC_ProduceCanMsg_Default</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lvc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> lvc.o(.data)
<LI> lvc.o(.text)
</UL>
<P><STRONG><a name="[1b5]"></a>LVC_InitFunctionObj</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lvc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_Initialize
</UL>

<P><STRONG><a name="[178]"></a>LVC_Initialize</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, lvc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LVC_Initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_InitFunctionObj
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_ServiceInit
</UL>

<P><STRONG><a name="[182]"></a>LVC_GetGpsBindStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lvc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iZxm2m_UpdateTlvMsg_A501
</UL>

<P><STRONG><a name="[184]"></a>LVC_GetGpsLockStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lvc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iZxm2m_UpdateTlvMsg_A501
</UL>

<P><STRONG><a name="[183]"></a>LVC_GetEcuBindStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lvc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iZxm2m_UpdateTlvMsg_A501
</UL>

<P><STRONG><a name="[185]"></a>LVC_GetEcuLockStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lvc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iZxm2m_UpdateTlvMsg_A501
</UL>

<P><STRONG><a name="[187]"></a>LVC_LockByUser</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lvc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iZxm2m_UpdateTlvMsg_A501
</UL>

<P><STRONG><a name="[188]"></a>LVC_LockBySimCard</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lvc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iZxm2m_UpdateTlvMsg_A501
</UL>

<P><STRONG><a name="[189]"></a>LVC_LockByOffline</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lvc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iZxm2m_UpdateTlvMsg_A501
</UL>

<P><STRONG><a name="[186]"></a>LVC_LockByGpsAnt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lvc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iZxm2m_UpdateTlvMsg_A501
</UL>

<P><STRONG><a name="[e5]"></a>Parm_FlashDbInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = Parm_FlashDbInit &rArr; FlashDB_KvdbInit &rArr; iKVDB_KvLoad &rArr; FlashDB_KvSetDefault &rArr; iKVDB_CreatKvBlob &rArr; iKVDB_NewKv &rArr; iKVDB_AllocKv &rArr; iKVDB_SentorIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvdbInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvdbControl
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Start
</UL>

<P><STRONG><a name="[197]"></a>Parm_SaveZxStsTmrInfo</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = Parm_SaveZxStsTmrInfo &rArr; FlashDB_KvSetBlob &rArr; iKVDB_SetKv &rArr; iKVDB_DelKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvSetBlob
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_BlobMake
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxSts_SaveDataToFdb
</UL>

<P><STRONG><a name="[194]"></a>Parm_ReadZxStsTmrInfo</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, parameters.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_BlobMake
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FalshDB_KvGetBlob
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxSts_ReadDataFromFdb
</UL>

<P><STRONG><a name="[199]"></a>Parm_SaveZxStsInfo</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = Parm_SaveZxStsInfo &rArr; FlashDB_KvSetBlob &rArr; iKVDB_SetKv &rArr; iKVDB_DelKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvSetBlob
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_BlobMake
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxSts_SaveDataToFdb
</UL>

<P><STRONG><a name="[195]"></a>Parm_ReadZxStsInfo</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, parameters.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_BlobMake
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FalshDB_KvGetBlob
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxSts_ReadDataFromFdb
</UL>

<P><STRONG><a name="[1a9]"></a>Parm_SaveTboxStsInfo</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = Parm_SaveTboxStsInfo &rArr; FlashDB_KvSetBlob &rArr; iKVDB_SetKv &rArr; iKVDB_DelKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvSetBlob
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_BlobMake
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TboxSts_SaveDataToFdb
</UL>

<P><STRONG><a name="[1a6]"></a>Parm_ReadTboxStsInfo</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = Parm_ReadTboxStsInfo &rArr; FalshDB_KvGetBlob &rArr; iKVDB_GetKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_BlobMake
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FalshDB_KvGetBlob
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TboxSts_ReadDataFromFdb
</UL>

<P><STRONG><a name="[1a3]"></a>Parm_SaveZxEngineUpStsInfo</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = Parm_SaveZxEngineUpStsInfo &rArr; FlashDB_KvSetBlob &rArr; iKVDB_SetKv &rArr; iKVDB_DelKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvSetBlob
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_BlobMake
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxStsEngine_SaveDataToFdb
</UL>

<P><STRONG><a name="[19f]"></a>Parm_ReadZxEngineUpStsInfo</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = Parm_ReadZxEngineUpStsInfo &rArr; FalshDB_KvGetBlob &rArr; iKVDB_GetKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_BlobMake
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FalshDB_KvGetBlob
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxStsEngine_ReadDataFromFdb
</UL>

<P><STRONG><a name="[1a4]"></a>Parm_SaveZxEngineDwStsInfo</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = Parm_SaveZxEngineDwStsInfo &rArr; FlashDB_KvSetBlob &rArr; iKVDB_SetKv &rArr; iKVDB_DelKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvSetBlob
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_BlobMake
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxStsEngine_SaveDataToFdb
</UL>

<P><STRONG><a name="[1a0]"></a>Parm_ReadZxEngineDwStsInfo</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = Parm_ReadZxEngineDwStsInfo &rArr; FalshDB_KvGetBlob &rArr; iKVDB_GetKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_BlobMake
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FalshDB_KvGetBlob
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxStsEngine_ReadDataFromFdb
</UL>

<P><STRONG><a name="[1bd]"></a>Parm_CalcXorValue</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Parm_CalcXorValue
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveTboxOfflineTime
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadTboxOfflineTime
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ResetM2mAssetDataToFactory
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadM2mAssetData
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveM2mAssetData
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SavePidInfo
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveLvcInfo
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadPidInfo
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadLvcInfo
</UL>

<P><STRONG><a name="[1b4]"></a>Parm_SaveLvcInfo</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Parm_SaveLvcInfo &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_CalcXorValue
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write (via Veneer)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase (via Veneer)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_ProduceCanMsg_LTC
</UL>

<P><STRONG><a name="[176]"></a>Parm_ReadLvcInfo</STRONG> (Thumb, 560 bytes, Stack size 104 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Parm_ReadLvcInfo &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_CalcXorValue
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write (via Veneer)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase (via Veneer)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read (via Veneer)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCloud_ServiceInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_ServiceInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_ProduceCanMsg_LTC
</UL>

<P><STRONG><a name="[128]"></a>Parm_SaveTboxOfflineTime</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Parm_SaveTboxOfflineTime &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_CalcXorValue
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write (via Veneer)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_CumulateOfflineTimeInWork
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
</UL>

<P><STRONG><a name="[148]"></a>Parm_ReadTboxOfflineTime</STRONG> (Thumb, 358 bytes, Stack size 48 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Parm_ReadTboxOfflineTime &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_CalcXorValue
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write (via Veneer)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase (via Veneer)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_ServiceInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_ProduceCanMsg_LTC
</UL>

<P><STRONG><a name="[1c0]"></a>Parm_SavePidInfo</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Parm_SavePidInfo &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_CalcXorValue
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write (via Veneer)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
</UL>

<P><STRONG><a name="[177]"></a>Parm_ReadPidInfo</STRONG> (Thumb, 518 bytes, Stack size 64 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Parm_ReadPidInfo &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_CalcXorValue
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write (via Veneer)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase (via Veneer)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_ServiceInit
</UL>

<P><STRONG><a name="[1c1]"></a>Parm_SaveM2mAssetData</STRONG> (Thumb, 214 bytes, Stack size 88 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Parm_SaveM2mAssetData &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildParaData
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_CalcXorValue
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write (via Veneer)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase (via Veneer)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqPwMsg
</UL>

<P><STRONG><a name="[1c4]"></a>Parm_ReadM2mAssetData</STRONG> (Thumb, 698 bytes, Stack size 48 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Parm_ReadM2mAssetData &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeParaData
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_CalcXorValue
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write (via Veneer)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase (via Veneer)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCloud_ServiceInit
</UL>

<P><STRONG><a name="[1c6]"></a>Parm_ResetM2mAssetDataToFactory</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Parm_ResetM2mAssetDataToFactory &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildParaData
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_CalcXorValue
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write (via Veneer)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase (via Veneer)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeTlvMsg_4001
</UL>

<P><STRONG><a name="[1c7]"></a>rfu_EraseFlashHexFile</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rfu_EraseFlashHexFile &rArr; sfud_erase &rArr; sfud_chip_erase &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_start
</UL>

<P><STRONG><a name="[1c8]"></a>rfu_SaveFlashHexFile</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rfu_SaveFlashHexFile &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_AnalyzeUdRspMsg
</UL>

<P><STRONG><a name="[1c9]"></a>rfu_ReadFlashHexFile</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rfu_ReadFlashHexFile &rArr; sfud_read &rArr; wait_busy &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfu_CheckNewFirmware
</UL>

<P><STRONG><a name="[1ca]"></a>rfu_CheckNewFirmware</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rfu_CheckNewFirmware &rArr; rfu_ReadFlashHexFile &rArr; sfud_read &rArr; wait_busy &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc32_Stream_Update
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc32_Stream_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc32_Stream_Final
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfu_ReadFlashHexFile
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_iap
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_AnalyzeUdRspMsg
</UL>

<P><STRONG><a name="[1ce]"></a>FAL_ShowPartTalbe</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, fal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[1d0]"></a>FAL_FlashDeviceFind</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FAL_FlashDeviceFind &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_InitEx
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAL_PartitionErase
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAL_PartitionWrite
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAL_PartitionRead
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFAL_PartitionInit
</UL>

<P><STRONG><a name="[1d2]"></a>iFAL_PartitionInit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = iFAL_PartitionInit &rArr; FAL_FlashDeviceFind &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAL_FlashDeviceFind
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAL_Init
</UL>

<P><STRONG><a name="[1d3]"></a>FAL_PartitionFind</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FAL_PartitionFind &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_InitEx
</UL>

<P><STRONG><a name="[1d5]"></a>FAL_PartitionRead</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, fal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FAL_PartitionRead &rArr; FAL_FlashDeviceFind &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAL_FlashDeviceFind
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashRead
</UL>

<P><STRONG><a name="[1d6]"></a>FAL_PartitionWrite</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, fal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FAL_PartitionWrite &rArr; FAL_FlashDeviceFind &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAL_FlashDeviceFind
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashWrite
</UL>

<P><STRONG><a name="[1d7]"></a>FAL_PartitionErase</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FAL_PartitionErase &rArr; FAL_FlashDeviceFind &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAL_FlashDeviceFind
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashErase
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAL_PartitionEraseAll
</UL>

<P><STRONG><a name="[1d8]"></a>FAL_PartitionEraseAll</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAL_PartitionErase
</UL>

<P><STRONG><a name="[1da]"></a>iFAL_FlashInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iFAL_FlashInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAL_Init
</UL>

<P><STRONG><a name="[1d9]"></a>FAL_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, fal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FAL_Init &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFAL_FlashInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFAL_PartitionInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_InitEx
</UL>

<P><STRONG><a name="[406]"></a>FAL_InitCheck</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fal.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>iFDB_SetStatus</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iFDB_SetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_WriteStatus
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FormatSentor
</UL>

<P><STRONG><a name="[1e1]"></a>iFDB_GetStatus</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iFDB_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_ReadStatus
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_ReadSectorInfo
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_ReadTsl
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_ReadSectorInfo
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_ReadKv
</UL>

<P><STRONG><a name="[1dc]"></a>iFDB_FlashRead</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = iFDB_FlashRead &rArr; FAL_PartitionRead &rArr; FAL_FlashDeviceFind &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAL_PartitionRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_BlobRead
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_ContinueFfAddr
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_ReadStatus
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_ReadSectorInfo
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_ReadTsl
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_PrintKvCb
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_MoveKv
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GetKv
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_ReadSectorInfo
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_ReadKv
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FindNextKvAddr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GetKvFromCache
</UL>

<P><STRONG><a name="[1dd]"></a>iFDB_FlashErase</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = iFDB_FlashErase &rArr; FAL_PartitionErase &rArr; FAL_FlashDeviceFind &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAL_PartitionErase
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_FormatSector
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FormatSentor
</UL>

<P><STRONG><a name="[1de]"></a>iFDB_FlashWrite</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = iFDB_FlashWrite &rArr; FAL_PartitionWrite &rArr; FAL_FlashDeviceFind &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAL_PartitionWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_WriteStatus
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_UpdateSecStatus
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_WriteTsl
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_FormatSector
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_AlignWrite
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_MoveKv
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FormatSentor
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_WriteKvHdr
</UL>

<P><STRONG><a name="[1df]"></a>iFDB_WriteStatus</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashWrite
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_SetStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TslSetStatus
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_UpdateSecStatus
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_WriteTsl
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_FormatSector
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_CheckAndRecoveryKvCb
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_CreatKvBlob
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_DoGc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_MoveKv
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_DelKv
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_UpdateSentorStatus
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_WriteKvHdr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_ReadKv
</UL>

<P><STRONG><a name="[1e0]"></a>iFDB_ReadStatus</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = iFDB_ReadStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashRead
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_GetStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_DelKv
</UL>

<P><STRONG><a name="[1e2]"></a>iFDB_ContinueFfAddr</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = iFDB_ContinueFfAddr &rArr; iFDB_FlashRead &rArr; FAL_PartitionRead &rArr; FAL_FlashDeviceFind &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_ReadSectorInfo
</UL>

<P><STRONG><a name="[1e7]"></a>iFDB_CalcCrc32</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = iFDB_CalcCrc32
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_CreatKvBlob
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_ReadKv
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GetKvFromCache
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_UpdataKvCache
</UL>

<P><STRONG><a name="[1e3]"></a>iFDB_InitEx</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = iFDB_InitEx &rArr; FAL_Init &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAL_Init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAL_PartitionFind
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAL_FlashDeviceFind
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TsdbInit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvdbInit
</UL>

<P><STRONG><a name="[1e4]"></a>iFDB_InitFinish</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = iFDB_InitFinish &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TsdbInit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvdbInit
</UL>

<P><STRONG><a name="[1b8]"></a>FlashDB_BlobMake</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flashdb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvGet
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvSet
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveZxStsTmrInfo
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveZxStsInfo
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveZxEngineUpStsInfo
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveZxEngineDwStsInfo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveTboxStsInfo
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadZxStsTmrInfo
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadZxStsInfo
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadZxEngineUpStsInfo
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadZxEngineDwStsInfo
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadTboxStsInfo
</UL>

<P><STRONG><a name="[1e5]"></a>FlashDB_BlobRead</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashRead
</UL>

<P><STRONG><a name="[204]"></a>FlashDB_KvSetDefault</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = FlashDB_KvSetDefault &rArr; iKVDB_CreatKvBlob &rArr; iKVDB_NewKv &rArr; iKVDB_AllocKv &rArr; iKVDB_SentorIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_CreatKvBlob
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FormatSentor
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_KvLoad
</UL>

<P><STRONG><a name="[205]"></a>iKVDB_KvLoad</STRONG> (Thumb, 172 bytes, Stack size 112 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = iKVDB_KvLoad &rArr; FlashDB_KvSetDefault &rArr; iKVDB_CreatKvBlob &rArr; iKVDB_NewKv &rArr; iKVDB_AllocKv &rArr; iKVDB_SentorIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvSetDefault
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GcCollect
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_SentorIterator
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_KvIterator
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvdbInit
</UL>

<P><STRONG><a name="[1b9]"></a>FlashDB_KvSetBlob</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = FlashDB_KvSetBlob &rArr; iKVDB_SetKv &rArr; iKVDB_DelKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_SetKv
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvSet
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveZxStsTmrInfo
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveZxStsInfo
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveZxEngineUpStsInfo
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveZxEngineDwStsInfo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveTboxStsInfo
</UL>

<P><STRONG><a name="[206]"></a>FlashDB_KvSet</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvSetBlob
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_BlobMake
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[1ba]"></a>FalshDB_KvGetBlob</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = FalshDB_KvGetBlob &rArr; iKVDB_GetKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GetKv
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvGet
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadZxStsTmrInfo
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadZxStsInfo
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadZxEngineUpStsInfo
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadZxEngineDwStsInfo
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadTboxStsInfo
</UL>

<P><STRONG><a name="[207]"></a>FlashDB_KvGet</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_IsString
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_BlobMake
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FalshDB_KvGetBlob
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>

<P><STRONG><a name="[208]"></a>FlashDB_KvDel</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_DelKv
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>

<P><STRONG><a name="[209]"></a>FlashDB_KvGetObj</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FindKv
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>

<P><STRONG><a name="[407]"></a>FlashDB_KvToBlob</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, flashdb.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>FlashDB_KvPrint</STRONG> (Thumb, 122 bytes, Stack size 80 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_KvIterator
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>

<P><STRONG><a name="[1b6]"></a>FlashDB_KvdbControl</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FlashDB_KvdbControl &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_FlashDbInit
</UL>

<P><STRONG><a name="[1b7]"></a>FlashDB_KvdbInit</STRONG> (Thumb, 542 bytes, Stack size 40 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = FlashDB_KvdbInit &rArr; iKVDB_KvLoad &rArr; FlashDB_KvSetDefault &rArr; iKVDB_CreatKvBlob &rArr; iKVDB_NewKv &rArr; iKVDB_AllocKv &rArr; iKVDB_SentorIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_KvLoad
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_InitFinish
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_InitEx
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_KvAutoUpdate
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_FlashDbInit
</UL>

<P><STRONG><a name="[408]"></a>FlashDB_KvIteratorInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flashdb.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>FlashDB_KvIterate</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GetNextSectorAddr
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_ReadSectorInfo
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_ReadKv
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GetNextKvAddr
</UL>

<P><STRONG><a name="[215]"></a>FlashDB_TslAppend</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_TslAppend
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>

<P><STRONG><a name="[216]"></a>FlashDB_TslIter</STRONG> (Thumb, 176 bytes, Stack size 88 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_ReadSectorInfo
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_GetNextTslAddr
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_GetNextSectorAddr
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_ReadTsl
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[218]"></a>FlashDB_TslIterByTime</STRONG> (Thumb, 312 bytes, Stack size 104 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_ReadSectorInfo
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_GetNextTslAddr
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_GetNextSectorAddr
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_ReadTsl
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TslQueryCount
</UL>

<P><STRONG><a name="[219]"></a>FlashDB_TslQueryCount</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TslIterByTime
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>

<P><STRONG><a name="[21a]"></a>FlashDB_TslSetStatus</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_WriteStatus
</UL>

<P><STRONG><a name="[409]"></a>FlashDB_TslToBlob</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, flashdb.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>FlashDB_TslClean</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_TslFormatAll
</UL>

<P><STRONG><a name="[21c]"></a>FlashDB_TsdbControl</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>

<P><STRONG><a name="[21d]"></a>FlashDB_TsdbInit</STRONG> (Thumb, 376 bytes, Stack size 136 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_InitFinish
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_InitEx
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_TslFormatAll
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_SectorIterator
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_ReadSectorInfo
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>

<P><STRONG><a name="[21e]"></a>USART1_Initialize</STRONG> (Thumb, 460 bytes, Stack size 96 bytes, pcdebughw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USART1_Initialize &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig (via Veneer)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init (via Veneer)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_ServiceInit
</UL>

<P><STRONG><a name="[97]"></a>USART1_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, pcdebughw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USART1_IRQHandler &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pcdebughw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DMA2_Stream7_IRQHandler &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[22a]"></a>USART1_TransmitData</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, pcdebughw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendM2mRsp
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendData
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>

<P><STRONG><a name="[22b]"></a>USART1_TransmitString</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pcdebughw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[22c]"></a>USART1_ReceiveData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pcdebughw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USART1_ReceiveData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_PcDebug
</UL>

<P><STRONG><a name="[22d]"></a>PcDebugPrintf_CreatMutex</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, pcdebug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[27b]"></a>PcDebug_SetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pcdebug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeTlvMsg_4FFF
</UL>

<P><STRONG><a name="[22f]"></a>PcDebug_SendData</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, pcdebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PcDebug_SendData &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TransmitData
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_CheckRecvMsg
</UL>

<P><STRONG><a name="[11f]"></a>PcDebug_SendString</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pcdebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PcDebug_SendString &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TransmitData
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveTboxOfflineTime
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadTboxOfflineTime
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_CorrectRtcStatus
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTL_Do1sTasks
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_CheckGpsAntennaIsOk
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_CheckAccOffEvent
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_StateManageService
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_PowerOn
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_PowerOff
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ResetM2mAssetDataToFactory
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadM2mAssetData
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveM2mAssetData
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SavePidInfo
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveLvcInfo
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_ProduceCanMsg_LTC
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_ServicePassive_LTC
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_CheckPassiveState
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ProcessCiMsg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadPidInfo
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadLvcInfo
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_CheckCommState
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_iap
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tbox_CheckPowerOffMachine
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_AnalyzeUdRspMsg
</UL>

<P><STRONG><a name="[1ab]"></a>PcDebug_Printf</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, pcdebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TransmitData
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcSoft_Update
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TsdbInit
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TsdbControl
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TslQueryCount
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TslIterByTime
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TslIter
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TslAppend
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvPrint
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvGetObj
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvDel
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvGet
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_KvLoad
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_InitFinish
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_InitEx
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_ReadStatus
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_WriteStatus
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_TslFormatAll
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_CheckSecHdrCb
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_TslAppend
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_FormatSector
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_ReadSectorInfo
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_CheckAndRecoveryKvCb
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_CheckSecHdrCb
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_KvAutoUpdate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_PrintKvCb
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_CreatKvBlob
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_NewKv
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GcCollect
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_DoGc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_MoveKv
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_DelKv
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_AllocKv
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FormatSentor
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_ReadSectorInfo
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_ReadKv
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAL_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvdbInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvdbControl
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvSetBlob
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FalshDB_KvGetBlob
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_ProcessCanMsg_LTC
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_SendCmd_LTC
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_ProcessDscCommand
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_power_on
</UL>

<P><STRONG><a name="[233]"></a>PcDebug_EncodeM2mData</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, pcdebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PcDebug_EncodeM2mData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendM2mRsp
</UL>

<P><STRONG><a name="[234]"></a>PcDebug_SendM2mRsp</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, pcdebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PcDebug_SendM2mRsp &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_EncodeM2mData
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TransmitData
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqRcMsg
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqPrMsg
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqPwMsg
</UL>

<P><STRONG><a name="[235]"></a>PcDebug_DecodeM2mData</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, pcdebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PcDebug_DecodeM2mData &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Service
</UL>

<P><STRONG><a name="[237]"></a>PcDebug_Service</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, pcdebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PcDebug_Service &rArr; osMessageQueuePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_DecodeM2mData
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_PcDebug
</UL>

<P><STRONG><a name="[239]"></a>AppThread_PcDebug</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pcdebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = AppThread_PcDebug &rArr; PcDebug_Service &rArr; osMessageQueuePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Service
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pcdebug.o(.text)
</UL>
<P><STRONG><a name="[e2]"></a>PcDebug_ServiceInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pcdebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = PcDebug_ServiceInit &rArr; USART1_Initialize &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Start
</UL>

<P><STRONG><a name="[ec]"></a>PcDebug_ServiceStart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pcdebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = PcDebug_ServiceStart &rArr; osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Start
</UL>

<P><STRONG><a name="[23a]"></a>Modem_GpioInitialize</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, momihw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Modem_GpioInitialize &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Momi_ServiceInit
</UL>

<P><STRONG><a name="[23b]"></a>USART3_Initialize</STRONG> (Thumb, 468 bytes, Stack size 96 bytes, momihw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USART3_Initialize &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig (via Veneer)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init (via Veneer)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Momi_ServiceInit
</UL>

<P><STRONG><a name="[99]"></a>USART3_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, momihw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USART3_IRQHandler &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;momi_msg_queue_push
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, momihw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[23e]"></a>USART3_TransmitData</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, momihw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USART3_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendCanMsg
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendVersionMsg
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendStatisticsMsg
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendDtcMsg
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendVehicleMsg
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendGpsMsg
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendColtMsg
</UL>

<P><STRONG><a name="[23f]"></a>USART3_TransmitString</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, momihw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[240]"></a>USART3_ReceiveData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, momihw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USART3_ReceiveData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_ModemProcess
</UL>

<P><STRONG><a name="[40a]"></a>momi_msg_queue_reset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, momiprotocol.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>momi_msg_queue_push</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, momiprotocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[241]"></a>momi_msg_queue_find</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = momi_msg_queue_find &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;momi_msg_queue_size
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;momi_msg_queue_pop
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_ModemProcess
</UL>

<P><STRONG><a name="[247]"></a>Modem_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, momiprotocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Momi_ProduceSendMsg
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_StateManageService
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
</UL>

<P><STRONG><a name="[248]"></a>Modem_SetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, momiprotocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Momi_ServiceInit
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_StateManageService
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_iap
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_power_on
</UL>

<P><STRONG><a name="[244]"></a>Modem_PowerOff</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Modem_PowerOff &rArr; PcDebug_SendString &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_StateManageService
</UL>

<P><STRONG><a name="[245]"></a>Modem_PowerOn</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Modem_PowerOn &rArr; PcDebug_SendString &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_StateManageService
</UL>

<P><STRONG><a name="[246]"></a>Modem_StateManageService</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Modem_StateManageService &rArr; Modem_PowerOn &rArr; PcDebug_SendString &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_PowerOn
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_PowerOff
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_SetState
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_ModemProduce
</UL>

<P><STRONG><a name="[249]"></a>iMomi_BuildAdSwitch</STRONG> (Thumb, 390 bytes, Stack size 16 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iMomi_BuildAdSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_GetRecvState
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_GetRecvState
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetSwitch3Status
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetSwitch2Status
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetSwitch1Status
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetBatVoltage
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetMainPowerVoltage
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tbox_GetMachineState
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_GetCommState
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_GetCommState
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildTlvMsg_F001
</UL>

<P><STRONG><a name="[25b]"></a>iMomi_CalcSumCheck</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iMomi_CalcSumCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Momi_CheckMsg
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendCanMsg
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendVersionMsg
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendStatisticsMsg
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendDtcMsg
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendVehicleMsg
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendGpsMsg
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendColtMsg
</UL>

<P><STRONG><a name="[25a]"></a>iMomi_SendColtMsg</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = iMomi_SendColtMsg &rArr; USART3_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_CalcSumCheck
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildTlvMsg_F001
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TransmitData
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Momi_ProduceSendMsg
</UL>

<P><STRONG><a name="[25c]"></a>iMomi_SendGpsMsg</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, momiprotocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_CalcSumCheck
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildTlvMsg_F002
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TransmitData
</UL>

<P><STRONG><a name="[25d]"></a>iMomi_SendVehicleMsg</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = iMomi_SendVehicleMsg &rArr; USART3_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_CalcSumCheck
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildTlvMsg_F012
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildTlvMsg_F011
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildTlvMsg_F010
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TransmitData
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Momi_ProduceSendMsg
</UL>

<P><STRONG><a name="[25e]"></a>iMomi_SendDtcMsg</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, momiprotocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_CalcSumCheck
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildTlvMsg_F020
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TransmitData
</UL>

<P><STRONG><a name="[25f]"></a>iMomi_SendStatisticsMsg</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = iMomi_SendStatisticsMsg &rArr; USART3_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_CalcSumCheck
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildTlvMsg_F030
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TransmitData
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Momi_ProduceSendMsg
</UL>

<P><STRONG><a name="[260]"></a>iMomi_SendVersionMsg</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = iMomi_SendVersionMsg &rArr; USART3_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_CalcSumCheck
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildTlvMsg_F040
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TransmitData
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Momi_ProduceSendMsg
</UL>

<P><STRONG><a name="[261]"></a>iMomi_SendCanMsg</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, momiprotocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_CalcSumCheck
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildTlvMsg_F050
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TransmitData
</UL>

<P><STRONG><a name="[262]"></a>Momi_ProduceSendMsg</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Momi_ProduceSendMsg &rArr; iMomi_SendVersionMsg &rArr; USART3_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetAccStatus
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendVersionMsg
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendStatisticsMsg
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendVehicleMsg
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendColtMsg
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_ModemProduce
</UL>

<P><STRONG><a name="[263]"></a>Momi_CheckMsg</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Momi_CheckMsg &rArr; iMomi_CalcSumCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_CalcSumCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Momi_ProcessRecvData
</UL>

<P><STRONG><a name="[266]"></a>iMomi_AnalyzeTlvData</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iMomi_AnalyzeTlvData &rArr; iMomi_AnalyzeTlvMsg_E001
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_AnalyzeTlvMsg_E001
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Momi_ProcessRecvData
</UL>

<P><STRONG><a name="[268]"></a>AppTask_ModemProduce</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AppTask_ModemProduce &rArr; Modem_StateManageService &rArr; Modem_PowerOn &rArr; PcDebug_SendString &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Momi_ProduceSendMsg
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_StateManageService
</UL>
<BR>[Address Reference Count : 1]<UL><LI> momiprotocol.o(.text)
</UL>
<P><STRONG><a name="[269]"></a>AppTask_ModemProcess</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AppTask_ModemProcess &rArr; USART3_ReceiveData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;momi_msg_queue_find
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Momi_ProcessRecvData
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;momi_msg_queue_size
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> momiprotocol.o(.text)
</UL>
<P><STRONG><a name="[e8]"></a>Momi_ServiceInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Momi_ServiceInit &rArr; USART3_Initialize &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_SetState
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Initialize
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_GpioInitialize
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxM2m_InitTlvData
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Start
</UL>

<P><STRONG><a name="[f0]"></a>Momi_ServiceStart</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Momi_ServiceStart &rArr; osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Start
</UL>

<P><STRONG><a name="[26b]"></a>im2m_BuildDeviceStatus</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildDeviceStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_GetRecvState
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetVehicleTowingStatus
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetMainPowerLowStatus
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetMainPowerStatus
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetBatChargeStatus
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetBatLowStatus
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetBoxOpenStatus
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetAccStatus
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_GetCommState
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildCmdRspRcMsg
</UL>

<P><STRONG><a name="[63]"></a>iM2m_AnalyzeTlvMsg_A510</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = iM2m_AnalyzeTlvMsg_A510 &rArr; LVC_ProcessDscCommand &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_GetRecvState
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_GetRecvState
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetMainPowerFullStatus
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetAccStatus
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_ProcessDscCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>iM2m_AnalyzeTlvMsg_A511</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = iM2m_AnalyzeTlvMsg_A511 &rArr; LVC_ProcessDscCommand &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_GetRecvState
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_GetRecvState
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetMainPowerFullStatus
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetAccStatus
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LVC_ProcessDscCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[27f]"></a>im2m_CalcSumCheck</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_CalcSumCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_CheckRecvMsg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildCmdRspRcMsg
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildCmdRspPrMsg
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildCmdRspPwMsg
</UL>

<P><STRONG><a name="[27e]"></a>im2m_BuildMsgHead</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im2m_BuildMsgHead
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildCmdRspRcMsg
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildCmdRspPrMsg
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildCmdRspPwMsg
</UL>

<P><STRONG><a name="[27c]"></a>im2m_GetCmdReqType</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = im2m_GetCmdReqType &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqMsg
</UL>

<P><STRONG><a name="[1c5]"></a>im2m_AnalyzeParaData</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = im2m_AnalyzeParaData
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadM2mAssetData
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqRcMsg
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqPwMsg
</UL>

<P><STRONG><a name="[1c3]"></a>im2m_BuildParaData</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im2m_BuildParaData
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ResetM2mAssetDataToFactory
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveM2mAssetData
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqPrMsg
</UL>

<P><STRONG><a name="[27d]"></a>im2m_BuildCmdRspPwMsg</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = im2m_BuildCmdRspPwMsg &rArr; im2m_BuildMsgHead
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildMsgHead
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_CalcSumCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqPwMsg
</UL>

<P><STRONG><a name="[280]"></a>im2m_AnalyzeCmdReqPwMsg</STRONG> (Thumb, 214 bytes, Stack size 136 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = im2m_AnalyzeCmdReqPwMsg &rArr; Parm_SaveM2mAssetData &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendM2mRsp
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeParaData
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveM2mAssetData
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildCmdRspPwMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqMsg
</UL>

<P><STRONG><a name="[281]"></a>im2m_BuildCmdRspPrMsg</STRONG> (Thumb, 162 bytes, Stack size 44 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = im2m_BuildCmdRspPrMsg &rArr; im2m_BuildMsgHead
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildMsgHead
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_CalcSumCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqPrMsg
</UL>

<P><STRONG><a name="[282]"></a>im2m_AnalyzeCmdReqPrMsg</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = im2m_AnalyzeCmdReqPrMsg &rArr; PcDebug_SendM2mRsp &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendM2mRsp
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildParaData
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildCmdRspPrMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqMsg
</UL>

<P><STRONG><a name="[283]"></a>im2m_BuildCmdRspRcMsg</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = im2m_BuildCmdRspRcMsg &rArr; im2m_BuildMsgHead
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildMsgHead
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_CalcSumCheck
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildDeviceStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqRcMsg
</UL>

<P><STRONG><a name="[284]"></a>im2m_AnalyzeCmdReqRcMsg</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = im2m_AnalyzeCmdReqRcMsg &rArr; PcDebug_SendM2mRsp &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendM2mRsp
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeParaData
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildCmdRspRcMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqMsg
</UL>

<P><STRONG><a name="[285]"></a>im2m_AnalyzeCmdReqAtMsg</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = im2m_AnalyzeCmdReqAtMsg &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqMsg
</UL>

<P><STRONG><a name="[286]"></a>im2m_AnalyzeCmdReqMsg</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = im2m_AnalyzeCmdReqMsg &rArr; im2m_AnalyzeCmdReqPwMsg &rArr; Parm_SaveM2mAssetData &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqAtMsg
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqRcMsg
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqPrMsg
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqPwMsg
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_GetCmdReqType
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_ProcessRecvMsg
</UL>

<P><STRONG><a name="[287]"></a>im2m_CheckRecvMsg</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = im2m_CheckRecvMsg &rArr; PcDebug_SendData &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendData
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_CalcSumCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2M_ProcessRecvMsg
</UL>

<P><STRONG><a name="[288]"></a>im2m_ProcessRecvMsg</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = im2m_ProcessRecvMsg &rArr; im2m_AnalyzeCmdReqMsg &rArr; im2m_AnalyzeCmdReqPwMsg &rArr; Parm_SaveM2mAssetData &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2M_ProcessRecvMsg
</UL>

<P><STRONG><a name="[289]"></a>M2M_ProcessRecvMsg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = M2M_ProcessRecvMsg &rArr; im2m_ProcessRecvMsg &rArr; im2m_AnalyzeCmdReqMsg &rArr; im2m_AnalyzeCmdReqPwMsg &rArr; Parm_SaveM2mAssetData &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_ProcessRecvMsg
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_CheckRecvMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysBus_ProcessPcDebugMsg
</UL>

<P><STRONG><a name="[40b]"></a>M2M_ProduceSendMsg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m2mprotocol.o(.text), UNUSED)

<P><STRONG><a name="[40c]"></a>M2M_Do1sTasks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m2mprotocol.o(.text), UNUSED)

<P><STRONG><a name="[40d]"></a>M2M_AddNewAlarmToList</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m2mprotocol.o(.text), UNUSED)

<P><STRONG><a name="[40e]"></a>M2M_GetConnStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, m2mprotocol.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>M2M_Initialize</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m2mprotocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCloud_ServiceInit
</UL>

<P><STRONG><a name="[28a]"></a>Tbox_CheckPowerOffMachine</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, tbox_machine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Tbox_CheckPowerOffMachine &rArr; am18x5_SetSleepTime &rArr; am1805_set_alarm &rArr; am1805_burst_write &rArr; mcu_i2c_write &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_PswControl
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetAccStatus
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_SetSleepTime
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_state_machine
</UL>

<P><STRONG><a name="[28c]"></a>SYSCLKConfig_STOP</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tbox_machine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCLKConfig_STOP &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
</UL>

<P><STRONG><a name="[298]"></a>Tbox_CheckSleepStatus</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, tbox_machine.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
</UL>

<P><STRONG><a name="[119]"></a>Tbox_ResetSleepTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tbox_machine.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[292]"></a>tbox_power_on</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, tbox_machine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tbox_power_on &rArr; RTC_GetBjTime &rArr; am18x5_GetDateTime &rArr; am18x5_GetTime &rArr; am1805_burst_read &rArr; mcu_i2c_read &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcSoft_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_SetState
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetBjTime
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_state_machine
</UL>

<P><STRONG><a name="[294]"></a>tbox_working</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, tbox_machine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tbox_working
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_GetRecvState
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_GetRecvState
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetAccStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_state_machine
</UL>

<P><STRONG><a name="[295]"></a>tbox_sleep</STRONG> (Thumb, 962 bytes, Stack size 32 bytes, tbox_machine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = tbox_sleep &rArr; ZxSts_SaveDataToFdb &rArr; Parm_SaveZxStsTmrInfo &rArr; FlashDB_KvSetBlob &rArr; iKVDB_SetKv &rArr; iKVDB_DelKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_PswControl
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveTboxOfflineTime
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetMainPowerLowStatus
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetMainPowerStatus
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_CumulateOfflineTimeInSleep
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_SetState
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_GetState
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SavePidInfo
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TboxSts_AccumulateTime
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TboxSts_SaveDataToFdb
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxStsEngine_SaveDataToFdb
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZxSts_SaveDataToFdb
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_SetSleepTime
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_ClearIntFlag
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetBjTime
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConvertDataTimeToSeconds
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tbox_CheckSleepStatus
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_state_machine
</UL>

<P><STRONG><a name="[29e]"></a>tbox_iap</STRONG> (Thumb, 396 bytes, Stack size 8 bytes, tbox_machine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tbox_iap &rArr; PcDebug_SendString &rArr; USART1_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_SetState
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfu_CheckNewFirmware
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_main (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_state_machine
</UL>

<P><STRONG><a name="[f2]"></a>tbox_state_machine</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, tbox_machine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = tbox_state_machine &rArr; tbox_sleep &rArr; ZxSts_SaveDataToFdb &rArr; Parm_SaveZxStsTmrInfo &rArr; FlashDB_KvSetBlob &rArr; iKVDB_SetKv &rArr; iKVDB_DelKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_iap
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_working
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_power_on
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tbox_CheckPowerOffMachine
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Start
</UL>

<P><STRONG><a name="[2a0]"></a>tbox_reset_parameter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tbox_machine.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_initialize
</UL>

<P><STRONG><a name="[ea]"></a>tbox_initialize</STRONG> (Thumb, 268 bytes, Stack size 4 bytes, tbox_machine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tbox_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_reset_parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Start
</UL>

<P><STRONG><a name="[2df]"></a>Tbox_SetMachineState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tbox_machine.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_AnalyzeUrRspMsg
</UL>

<P><STRONG><a name="[24f]"></a>Tbox_GetMachineState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tbox_machine.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildAdSwitch
</UL>

<P><STRONG><a name="[2a1]"></a>SysBus_ProcessPcDebugMsg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, icloud_machine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = SysBus_ProcessPcDebugMsg &rArr; M2M_ProcessRecvMsg &rArr; im2m_ProcessRecvMsg &rArr; im2m_AnalyzeCmdReqMsg &rArr; im2m_AnalyzeCmdReqPwMsg &rArr; Parm_SaveM2mAssetData &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2M_ProcessRecvMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysBus_ProcessMsg
</UL>

<P><STRONG><a name="[2a2]"></a>SysBus_ProcessMsg</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, icloud_machine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = SysBus_ProcessMsg &rArr; SysBus_ProcessPcDebugMsg &rArr; M2M_ProcessRecvMsg &rArr; im2m_ProcessRecvMsg &rArr; im2m_AnalyzeCmdReqMsg &rArr; im2m_AnalyzeCmdReqPwMsg &rArr; Parm_SaveM2mAssetData &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysBus_ProcessPcDebugMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_iCloud
</UL>

<P><STRONG><a name="[2a3]"></a>AppThread_iCloud</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, icloud_machine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = AppThread_iCloud &rArr; SysBus_ProcessMsg &rArr; SysBus_ProcessPcDebugMsg &rArr; M2M_ProcessRecvMsg &rArr; im2m_ProcessRecvMsg &rArr; im2m_AnalyzeCmdReqMsg &rArr; im2m_AnalyzeCmdReqPwMsg &rArr; Parm_SaveM2mAssetData &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysBus_ProcessMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icloud_machine.o(.text)
</UL>
<P><STRONG><a name="[e7]"></a>iCloud_ServiceInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, icloud_machine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = iCloud_ServiceInit &rArr; Parm_ReadLvcInfo &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_ReadInternalWdtState
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadM2mAssetData
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadLvcInfo
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M2M_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Start
</UL>

<P><STRONG><a name="[ed]"></a>iCloud_ServiceStart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, icloud_machine.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = iCloud_ServiceStart &rArr; osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Start
</UL>

<P><STRONG><a name="[2b8]"></a>bcd2dec</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, am1805.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_GetTime
</UL>

<P><STRONG><a name="[2ba]"></a>dec2bcd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, am1805.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_set_alarm
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_SetTime
</UL>

<P><STRONG><a name="[2a7]"></a>mcu_i2c_write</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, am1805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mcu_i2c_write &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_write_byte
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_wait_ack
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_stop
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_burst_write
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_writereg
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_setreg
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_clrreg
</UL>

<P><STRONG><a name="[2ac]"></a>mcu_i2c_read</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, am1805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mcu_i2c_read &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_write_byte
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_wait_ack
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_stop
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_start
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_restart
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_read_byte
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_not_ack
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_burst_read
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_readreg
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_setreg
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_clrreg
</UL>

<P><STRONG><a name="[2b1]"></a>am1805_clrreg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, am1805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = am1805_clrreg &rArr; mcu_i2c_read &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_read
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_PswControl
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_Initialize
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_DisableAlarm
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_set_alarm
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_SetTime
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_SetSleepTime
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_ClearIntFlag
</UL>

<P><STRONG><a name="[2b2]"></a>am1805_setreg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, am1805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = am1805_setreg &rArr; mcu_i2c_read &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_read
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_PswControl
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_Initialize
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_set_alarm
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_SetTime
</UL>

<P><STRONG><a name="[2b3]"></a>am1805_readreg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, am1805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = am1805_readreg &rArr; mcu_i2c_read &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_osc_sel
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_set_alarm
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_SetTime
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_GetTime
</UL>

<P><STRONG><a name="[2b4]"></a>am1805_writereg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, am1805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = am1805_writereg &rArr; mcu_i2c_write &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_osc_sel
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_SetTime
</UL>

<P><STRONG><a name="[2b5]"></a>am1805_burst_read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, am1805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = am1805_burst_read &rArr; mcu_i2c_read &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_GetTime
</UL>

<P><STRONG><a name="[2b6]"></a>am1805_burst_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, am1805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = am1805_burst_write &rArr; mcu_i2c_write &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_set_alarm
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_SetTime
</UL>

<P><STRONG><a name="[2b7]"></a>am18x5_GetTime</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, am1805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = am18x5_GetTime &rArr; am1805_burst_read &rArr; mcu_i2c_read &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_burst_read
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_readreg
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2dec
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_GetDateTime
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_SetSleepTime
</UL>

<P><STRONG><a name="[2b9]"></a>am18x5_SetTime</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, am1805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = am18x5_SetTime &rArr; am1805_burst_write &rArr; mcu_i2c_write &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_burst_write
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_writereg
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_readreg
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_setreg
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_clrreg
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec2bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_SetDateTime
</UL>

<P><STRONG><a name="[2bb]"></a>am1805_set_alarm</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, am1805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = am1805_set_alarm &rArr; am1805_burst_write &rArr; mcu_i2c_write &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_burst_write
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_readreg
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_setreg
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_clrreg
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec2bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_SetSleepTime
</UL>

<P><STRONG><a name="[2bc]"></a>am1805_osc_sel</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, am1805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = am1805_osc_sel &rArr; am1805_writereg &rArr; mcu_i2c_write &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_writereg
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_readreg
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_Initialize
</UL>

<P><STRONG><a name="[12c]"></a>am18x5_PswControl</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, am1805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = am18x5_PswControl &rArr; am1805_setreg &rArr; mcu_i2c_read &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_setreg
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_clrreg
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTL_Do1sTasks
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_Initialize
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tbox_CheckPowerOffMachine
</UL>

<P><STRONG><a name="[28b]"></a>am18x5_SetSleepTime</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, am1805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = am18x5_SetSleepTime &rArr; am1805_set_alarm &rArr; am1805_burst_write &rArr; mcu_i2c_write &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_set_alarm
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_GetTime
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_clrreg
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tbox_CheckPowerOffMachine
</UL>

<P><STRONG><a name="[29a]"></a>am18x5_ClearIntFlag</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, am1805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = am18x5_ClearIntFlag &rArr; am1805_clrreg &rArr; mcu_i2c_read &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_clrreg
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
</UL>

<P><STRONG><a name="[2bd]"></a>am18x5_DisableAlarm</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, am1805.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_clrreg
</UL>

<P><STRONG><a name="[2be]"></a>am18x5_GetDateTime</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, am1805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = am18x5_GetDateTime &rArr; am18x5_GetTime &rArr; am1805_burst_read &rArr; mcu_i2c_read &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetUtcTime
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetBjTime
</UL>

<P><STRONG><a name="[2bf]"></a>am18x5_SetDateTime</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, am1805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = am18x5_SetDateTime &rArr; am18x5_SetTime &rArr; am1805_burst_write &rArr; mcu_i2c_write &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CorrectTime
</UL>

<P><STRONG><a name="[2c0]"></a>am18x5_Initialize</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, am1805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = am18x5_Initialize &rArr; am1805_osc_sel &rArr; am1805_writereg &rArr; mcu_i2c_write &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_PswControl
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_Initialize
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_osc_sel
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_setreg
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_clrreg
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_Initialize
</UL>

<P><STRONG><a name="[2c1]"></a>i2c1_Initialize</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, i2c1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = i2c1_Initialize &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_Initialize
</UL>

<P><STRONG><a name="[40f]"></a>i2c1_idle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2c1.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>i2c1_start</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, i2c1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c1_start &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_write_bytes
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_read_bytes
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_read_byte
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_write_byte
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_read
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_write
</UL>

<P><STRONG><a name="[2ad]"></a>i2c1_restart</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, i2c1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c1_restart &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_read_bytes
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_read_byte
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_read
</UL>

<P><STRONG><a name="[2ab]"></a>i2c1_stop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, i2c1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c1_stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_write_bytes
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_read_bytes
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_read_byte
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_write_byte
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_wait_ack
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_read
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_write
</UL>

<P><STRONG><a name="[410]"></a>i2c1_abort</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2c1.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>i2c1_wait_ack</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, i2c1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c1_wait_ack &rArr; i2c1_stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_write_bytes
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_read_bytes
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_read_byte
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_write_byte
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_read
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_write
</UL>

<P><STRONG><a name="[2af]"></a>i2c1_ack</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, i2c1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c1_ack &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_read_bytes
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_read
</UL>

<P><STRONG><a name="[2b0]"></a>i2c1_not_ack</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, i2c1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c1_not_ack &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_read_bytes
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_read_byte
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_read
</UL>

<P><STRONG><a name="[2a9]"></a>i2c1_write_byte</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, i2c1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c1_write_byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_write_bytes
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_read_bytes
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_read_byte
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_write_byte
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_read
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_write
</UL>

<P><STRONG><a name="[2ae]"></a>i2c1_read_byte</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, i2c1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c1_read_byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_read_bytes
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_read_byte
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_read
</UL>

<P><STRONG><a name="[2c3]"></a>i2c1_LD_write_byte</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, i2c1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_write_byte
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_wait_ack
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_stop
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_start
</UL>

<P><STRONG><a name="[2c4]"></a>i2c1_LD_read_byte</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, i2c1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_write_byte
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_wait_ack
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_stop
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_start
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_restart
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_read_byte
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_not_ack
</UL>

<P><STRONG><a name="[2c5]"></a>i2c1_LD_read_bytes</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, i2c1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_write_byte
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_wait_ack
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_stop
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_start
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_restart
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_read_byte
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_not_ack
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_ack
</UL>

<P><STRONG><a name="[2c6]"></a>i2c1_LD_write_bytes</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, i2c1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_write_byte
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_wait_ack
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_stop
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_start
</UL>

<P><STRONG><a name="[296]"></a>RTC_ConvertDataTimeToSeconds</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RTC_ConvertDataTimeToSeconds &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
</UL>

<P><STRONG><a name="[411]"></a>RTC_ConvertSecondsToDateTime</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>RTC_GetBjTime</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RTC_GetBjTime &rArr; am18x5_GetDateTime &rArr; am18x5_GetTime &rArr; am1805_burst_read &rArr; mcu_i2c_read &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_GetDateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcSoft_Update
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_power_on
</UL>

<P><STRONG><a name="[130]"></a>RTC_CorrectTime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RTC_CorrectTime &rArr; am18x5_SetDateTime &rArr; am18x5_SetTime &rArr; am1805_burst_write &rArr; mcu_i2c_write &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_SetDateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_CorrectRtcStatus
</UL>

<P><STRONG><a name="[412]"></a>RTC_CovertUtcToBjt</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>RTC_ConvertBjToUtc</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetUtcTime
</UL>

<P><STRONG><a name="[2c7]"></a>RTC_GetUtcTime</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConvertBjToUtc
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_GetDateTime
</UL>

<P><STRONG><a name="[265]"></a>rtcSoft_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcSoft_Update
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_AnalyzeTlvMsg_E001
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_power_on
</UL>

<P><STRONG><a name="[140]"></a>rtcSoft_Run</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do10msTasks
</UL>

<P><STRONG><a name="[13b]"></a>rtcSoft_Update</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rtcSoft_Update &rArr; RTC_GetBjTime &rArr; am18x5_GetDateTime &rArr; am18x5_GetTime &rArr; am1805_burst_read &rArr; mcu_i2c_read &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcSoft_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetBjTime
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do1sTasks
</UL>

<P><STRONG><a name="[e3]"></a>rtc_Initialize</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rtc_Initialize &rArr; am18x5_Initialize &rArr; am1805_osc_sel &rArr; am1805_writereg &rArr; mcu_i2c_write &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Start
</UL>

<P><STRONG><a name="[2c9]"></a>led_on_off</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_state_machine
</UL>

<P><STRONG><a name="[13f]"></a>led_state_machine</STRONG> (Thumb, 704 bytes, Stack size 12 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = led_state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on_off
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do10msTasks
</UL>

<P><STRONG><a name="[413]"></a>turn_on_all_leds</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[414]"></a>turn_off_all_leds</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[415]"></a>GetCrc32</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, crc32.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>GetCrc32_Stream_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, crc32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfu_CheckNewFirmware
</UL>

<P><STRONG><a name="[1cc]"></a>GetCrc32_Stream_Update</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, crc32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetCrc32_Stream_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfu_CheckNewFirmware
</UL>

<P><STRONG><a name="[1cd]"></a>GetCrc32_Stream_Final</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, crc32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfu_CheckNewFirmware
</UL>

<P><STRONG><a name="[2ca]"></a>ADC_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[10b]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initialize
</UL>

<P><STRONG><a name="[416]"></a>ADC_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>ADC_CommonInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initialize
</UL>

<P><STRONG><a name="[417]"></a>ADC_CommonStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initialize
</UL>

<P><STRONG><a name="[418]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[419]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[41a]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initialize
</UL>

<P><STRONG><a name="[41b]"></a>ADC_VBATCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initialize
</UL>

<P><STRONG><a name="[111]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initialize
</UL>

<P><STRONG><a name="[41c]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[41d]"></a>ADC_EOCOnEachRegularChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[41e]"></a>ADC_ContinuousModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[41f]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[420]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[421]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[422]"></a>ADC_GetMultiModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initialize
</UL>

<P><STRONG><a name="[10e]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initialize
</UL>

<P><STRONG><a name="[423]"></a>ADC_MultiModeDMARequestAfterLastTransferCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[424]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[425]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[426]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[427]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[428]"></a>ADC_ExternalTrigInjectedConvEdgeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[429]"></a>ADC_SoftwareStartInjectedConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[42a]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[42b]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[42c]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[42d]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[42e]"></a>ADC_ITConfig</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[42f]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[430]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[431]"></a>ADC_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[432]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>CAN_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f2xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize
</UL>

<P><STRONG><a name="[150]"></a>CAN_Init</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, stm32f2xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize
</UL>

<P><STRONG><a name="[152]"></a>CAN_FilterInit</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, stm32f2xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize
</UL>

<P><STRONG><a name="[14f]"></a>CAN_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize
</UL>

<P><STRONG><a name="[433]"></a>CAN_SlaveStartBank</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[434]"></a>CAN_DBGFreeze</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[435]"></a>CAN_TTComModeCmd</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>CAN_Transmit</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, stm32f2xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TransmitData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TransmitData
</UL>

<P><STRONG><a name="[436]"></a>CAN_TransmitStatus</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[437]"></a>CAN_CancelTransmit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>CAN_Receive</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, stm32f2xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[438]"></a>CAN_FIFORelease</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[439]"></a>CAN_MessagePending</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[43a]"></a>CAN_OperatingModeRequest</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[43b]"></a>CAN_Sleep</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[43c]"></a>CAN_WakeUp</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[43d]"></a>CAN_GetLastErrorCode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[43e]"></a>CAN_GetReceiveErrorCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[43f]"></a>CAN_GetLSBTransmitErrorCounter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>CAN_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Can2Recv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Can1Recv
</UL>

<P><STRONG><a name="[440]"></a>CAN_GetFlagStatus</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[441]"></a>CAN_ClearFlag</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>CAN_GetITStatus</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, stm32f2xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>CAN_ClearITPendingBit</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initialize
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Initialize
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Initialize
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Initialize
</UL>

<P><STRONG><a name="[108]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initialize
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Initialize
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Initialize
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Initialize
</UL>

<P><STRONG><a name="[442]"></a>DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initialize
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TransmitString
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TransmitData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Initialize
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TransmitString
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TransmitData
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Initialize
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_TransmitString
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_TransmitData
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Initialize
</UL>

<P><STRONG><a name="[443]"></a>DMA_PeriphIncOffsetSizeConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[444]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TransmitString
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TransmitData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TransmitString
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TransmitData
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_TransmitString
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_TransmitData
</UL>

<P><STRONG><a name="[227]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>

<P><STRONG><a name="[445]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[446]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[447]"></a>DMA_MemoryTargetConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[448]"></a>DMA_GetCurrentMemoryTarget</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[449]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[44a]"></a>DMA_GetFIFOStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[44b]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>DMA_ClearFlag</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Initialize
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Initialize
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Initialize
</UL>

<P><STRONG><a name="[223]"></a>DMA_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Initialize
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Initialize
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Initialize
</UL>

<P><STRONG><a name="[229]"></a>DMA_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
</UL>

<P><STRONG><a name="[44c]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[44d]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IN_GPIO_EXTI_Initialize
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_WAKE_GPIO_EXTI_Initialize
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WAKE_UP_GPIO_EXTI_Initialize
</UL>

<P><STRONG><a name="[44e]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[44f]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[450]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[451]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[f5]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[f6]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[f7]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[f8]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[452]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>PWR_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f2xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[ff]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_Initialize
</UL>

<P><STRONG><a name="[453]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[454]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[455]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[456]"></a>PWR_BackupRegulatorCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[457]"></a>PWR_FlashPowerDownCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f2xx_pwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWR_EnterSTOPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
</UL>

<P><STRONG><a name="[458]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[459]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[45a]"></a>PWR_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[45b]"></a>RCC_DeInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>RCC_HSEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
</UL>

<P><STRONG><a name="[28e]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
</UL>

<P><STRONG><a name="[2cf]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[45c]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[45d]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[45e]"></a>RCC_LSEConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[45f]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[460]"></a>RCC_PLLConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
</UL>

<P><STRONG><a name="[461]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[462]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[463]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[464]"></a>RCC_MCO1Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[465]"></a>RCC_MCO2Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
</UL>

<P><STRONG><a name="[291]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLKConfig_STOP
</UL>

<P><STRONG><a name="[466]"></a>RCC_HCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[467]"></a>RCC_PCLK1Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[468]"></a>RCC_PCLK2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[469]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[46a]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[46b]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[46c]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GpioInitialize
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IN_GPIO_EXTI_Initialize
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_WAKE_GPIO_EXTI_Initialize
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WAKE_UP_GPIO_EXTI_Initialize
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initialize
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_Initialize
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Initialize
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_GpioInitialize
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Initialize
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Initialize
</UL>

<P><STRONG><a name="[46d]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[46e]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_Initialize
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Initialize
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_configuration (via Veneer)
</UL>

<P><STRONG><a name="[106]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IN_GPIO_EXTI_Initialize
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_WAKE_GPIO_EXTI_Initialize
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WAKE_UP_GPIO_EXTI_Initialize
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initialize
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Initialize
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_configuration (via Veneer)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_Initialize
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Initialize
</UL>

<P><STRONG><a name="[3ea]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit (via Veneer)
</UL>

<P><STRONG><a name="[46f]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[470]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit (via Veneer)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[2cb]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit (via Veneer)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DeInit
</UL>

<P><STRONG><a name="[471]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[472]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[473]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[474]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[475]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[476]"></a>RCC_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[477]"></a>RCC_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[478]"></a>RCC_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[479]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>SYSCFG_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f2xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[47a]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f2xx_syscfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IN_GPIO_EXTI_Initialize
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_WAKE_GPIO_EXTI_Initialize
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WAKE_UP_GPIO_EXTI_Initialize
</UL>

<P><STRONG><a name="[47b]"></a>SYSCFG_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[47c]"></a>SYSCFG_CompensationCellCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[47d]"></a>SYSCFG_GetCompensationCellStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>USART_DeInit</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[21f]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Initialize
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Initialize
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Initialize
</UL>

<P><STRONG><a name="[47e]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[47f]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[480]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Initialize
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Initialize
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Initialize
</UL>

<P><STRONG><a name="[481]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[482]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[483]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[484]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[485]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[486]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[487]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[488]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[489]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[48a]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[48b]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[48c]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[48d]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[48e]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[48f]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[490]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[491]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Initialize
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Initialize
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Initialize
</UL>

<P><STRONG><a name="[220]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;momi_msg_queue_find
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Initialize
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Initialize
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Initialize
</UL>

<P><STRONG><a name="[492]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Initialize
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Initialize
</UL>

<P><STRONG><a name="[225]"></a>USART_GetITStatus</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>

<P><STRONG><a name="[226]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_Initialize
</UL>

<P><STRONG><a name="[116]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IN_GPIO_EXTI_Initialize
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_WAKE_GPIO_EXTI_Initialize
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WAKE_UP_GPIO_EXTI_Initialize
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Initialize
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Initialize
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Initialize
</UL>

<P><STRONG><a name="[493]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[494]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[495]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>iFCLIT_CalcSumCheck</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, auxcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iFCLIT_CalcSumCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_CheckMsg
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_SendUrReqMsg
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_SendUdReqMsg
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_SendUnRspMsg
</UL>

<P><STRONG><a name="[2da]"></a>FCLIT_Do50msTasks</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, auxcom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCLIT_ProduceSendMsg
</UL>

<P><STRONG><a name="[2e6]"></a>FCLIT_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, auxcom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCom_ServiceInit
</UL>

<P><STRONG><a name="[2d3]"></a>iFCLIT_SendUnRspMsg</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, auxcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = iFCLIT_SendUnRspMsg &rArr; USART6_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_TransmitData
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_CalcSumCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCLIT_ProduceSendMsg
</UL>

<P><STRONG><a name="[2d6]"></a>iFCLIT_start</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, auxcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = iFCLIT_start &rArr; rfu_EraseFlashHexFile &rArr; sfud_erase &rArr; sfud_chip_erase &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfu_EraseFlashHexFile
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCLIT_ProduceSendMsg
</UL>

<P><STRONG><a name="[2d7]"></a>iFCLIT_SendUdReqMsg</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, auxcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = iFCLIT_SendUdReqMsg &rArr; USART6_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_TransmitData
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_CalcSumCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCLIT_ProduceSendMsg
</UL>

<P><STRONG><a name="[2d8]"></a>iFCLIT_SendUrReqMsg</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, auxcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = iFCLIT_SendUrReqMsg &rArr; USART6_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_TransmitData
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_CalcSumCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCLIT_ProduceSendMsg
</UL>

<P><STRONG><a name="[2d9]"></a>FCLIT_ProduceSendMsg</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, auxcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FCLIT_ProduceSendMsg &rArr; iFCLIT_SendUrReqMsg &rArr; USART6_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_SendUrReqMsg
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_SendUdReqMsg
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_start
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_SendUnRspMsg
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCLIT_Do50msTasks
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_AuxComProduce
</UL>

<P><STRONG><a name="[2db]"></a>iFCLIT_CheckMsg</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, auxcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iFCLIT_CheckMsg &rArr; iFCLIT_CalcSumCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_CalcSumCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCLIT_ProcessRecvMsg
</UL>

<P><STRONG><a name="[2dc]"></a>iFCLIT_AnalyzeUnReqMsg</STRONG> (Thumb, 576 bytes, Stack size 32 bytes, auxcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iFCLIT_AnalyzeUnReqMsg &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCLIT_ProcessRecvMsg
</UL>

<P><STRONG><a name="[2dd]"></a>iFCLIT_AnalyzeUdRspMsg</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, auxcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = iFCLIT_AnalyzeUdRspMsg &rArr; rfu_SaveFlashHexFile &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfu_CheckNewFirmware
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfu_SaveFlashHexFile
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCLIT_ProcessRecvMsg
</UL>

<P><STRONG><a name="[2de]"></a>iFCLIT_AnalyzeUrRspMsg</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, auxcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = iFCLIT_AnalyzeUrRspMsg &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tbox_SetMachineState
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCLIT_ProcessRecvMsg
</UL>

<P><STRONG><a name="[2e1]"></a>AppTask_AuxComProduce</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, auxcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AppTask_AuxComProduce &rArr; FCLIT_ProduceSendMsg &rArr; iFCLIT_SendUrReqMsg &rArr; USART6_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCLIT_ProduceSendMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auxcom.o(.text)
</UL>
<P><STRONG><a name="[2e2]"></a>AuxCom_ProcessM2mMsg</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, auxcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AuxCom_ProcessM2mMsg &rArr; osMessageQueuePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_AuxComProcess
</UL>

<P><STRONG><a name="[2e3]"></a>AppTask_AuxComProcess</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, auxcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = AppTask_AuxComProcess &rArr; FCLIT_ProcessRecvMsg &rArr; iFCLIT_AnalyzeUdRspMsg &rArr; rfu_SaveFlashHexFile &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_ReceiveData
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCom_ProcessM2mMsg
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCLIT_ProcessRecvMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auxcom.o(.text)
</UL>
<P><STRONG><a name="[eb]"></a>AuxCom_ServiceInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, auxcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AuxCom_ServiceInit &rArr; USART6_Initialize &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Initialize
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCLIT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Start
</UL>

<P><STRONG><a name="[f1]"></a>AuxCom_ServiceStart</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, auxcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = AuxCom_ServiceStart &rArr; osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Start
</UL>

<P><STRONG><a name="[2e5]"></a>USART6_Initialize</STRONG> (Thumb, 464 bytes, Stack size 96 bytes, auxcomhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USART6_Initialize &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig (via Veneer)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init (via Veneer)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCom_ServiceInit
</UL>

<P><STRONG><a name="[b9]"></a>USART6_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, auxcomhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USART6_IRQHandler &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, auxcomhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2d5]"></a>USART6_TransmitData</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, auxcomhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USART6_TransmitData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_SendUrReqMsg
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_SendUdReqMsg
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_SendUnRspMsg
</UL>

<P><STRONG><a name="[2e7]"></a>USART6_TransmitString</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, auxcomhw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2e4]"></a>USART6_ReceiveData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, auxcomhw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USART6_ReceiveData &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_AuxComProcess
</UL>

<P><STRONG><a name="[71]"></a>SysTick_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmsis_os2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>osKernelInitialize</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, cmsis_os2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ed]"></a>osKernelGetInfo</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2ee]"></a>osKernelGetState</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>

<P><STRONG><a name="[103]"></a>osKernelStart</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cmsis_os2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[297]"></a>osKernelLock</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, cmsis_os2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelLock
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
</UL>

<P><STRONG><a name="[29b]"></a>osKernelUnlock</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, cmsis_os2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osKernelUnlock &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
</UL>

<P><STRONG><a name="[2f2]"></a>osKernelRestoreLock</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[2f3]"></a>osKernelGetTickCount</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[496]"></a>osKernelGetTickFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os2.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>osKernelGetSysTimerCount</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetOverflow
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetInterval
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetCount
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>

<P><STRONG><a name="[497]"></a>osKernelGetSysTimerFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os2.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>osThreadNew</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, cmsis_os2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCloud_ServiceStart
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_ServiceStart
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Momi_ServiceStart
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Collect_ServiceStart
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_ServiceStart
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCom_ServiceStart
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2fc]"></a>osThreadGetName</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcTaskGetName
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[2fe]"></a>osThreadGetId</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>

<P><STRONG><a name="[300]"></a>osThreadGetState</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[302]"></a>osThreadGetStackSpace</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[304]"></a>osThreadSetPriority</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[306]"></a>osThreadGetPriority</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[308]"></a>osThreadYield</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[309]"></a>osThreadSuspend</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[30b]"></a>osThreadResume</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[30d]"></a>osThreadExit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[30f]"></a>osThreadTerminate</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[310]"></a>osThreadGetCount</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[312]"></a>osThreadEnumerate</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[316]"></a>osThreadFlagsSet</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[319]"></a>osThreadFlagsClear</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[31a]"></a>osThreadFlagsGet</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[31b]"></a>osThreadFlagsWait</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[e1]"></a>osDelay</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cmsis_os2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveTboxOfflineTime
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadTboxOfflineTime
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Collect
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTL_Do1sTasks
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Start
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_ModemProduce
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_StateManageService
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_PowerOn
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_PowerOff
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ResetM2mAssetDataToFactory
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadM2mAssetData
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveM2mAssetData
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SavePidInfo
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveLvcInfo
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadPidInfo
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadLvcInfo
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_osc_sel
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_sleep
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tbox_CheckPowerOffMachine
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_AuxComProduce
</UL>

<P><STRONG><a name="[31e]"></a>osDelayUntil</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[321]"></a>osTimerNew</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateStatic
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[324]"></a>osTimerGetName</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcTimerGetName
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[326]"></a>osTimerStart</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[328]"></a>osTimerStop</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[32a]"></a>osTimerIsRunning</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[32b]"></a>osTimerDelete</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[32c]"></a>osEventFlagsNew</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreateStatic
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[32f]"></a>osEventFlagsSet</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBitsFromISR
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[332]"></a>osEventFlagsClear</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupGetBitsFromISR
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBitsFromISR
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[336]"></a>osEventFlagsGet</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupGetBitsFromISR
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[337]"></a>osEventFlagsWait</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[339]"></a>osEventFlagsDelete</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[22e]"></a>osMutexNew</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebugPrintf_CreatMutex
</UL>

<P><STRONG><a name="[230]"></a>osMutexAcquire</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, cmsis_os2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMutexAcquire &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>

<P><STRONG><a name="[232]"></a>osMutexRelease</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cmsis_os2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>

<P><STRONG><a name="[341]"></a>osMutexGetOwner</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGetMutexHolder
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[343]"></a>osMutexDelete</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[14c]"></a>osSemaphoreNew</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, cmsis_os2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_FlashDbInit
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Initialize
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Initialize
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configuration (via Veneer)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_Initialize
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_Initialize
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Initialize
</UL>

<P><STRONG><a name="[156]"></a>osSemaphoreAcquire</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, cmsis_os2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_ReceiveMessage
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_ReceiveMessage
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_PswControl
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_ReceiveData
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TransmitString
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TransmitData
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_ReceiveData
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TransmitString
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TransmitData
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_lock
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lock (via Veneer)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_write_bytes
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_read_bytes
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_read_byte
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_write_byte
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_DisableAlarm
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_set_alarm
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_SetTime
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_GetTime
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_read
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_write
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_ClearIntFlag
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_TransmitString
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_TransmitData
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_ReceiveData
</UL>

<P><STRONG><a name="[15c]"></a>osSemaphoreRelease</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cmsis_os2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_FilterFrame
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_FilterFrame
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_PswControl
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdb_unlock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_unlock (via Veneer)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_write_bytes
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_read_bytes
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_read_byte
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_LD_write_byte
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_DisableAlarm
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am1805_set_alarm
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_SetTime
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_GetTime
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_read
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_i2c_write
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am18x5_ClearIntFlag
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>

<P><STRONG><a name="[34b]"></a>osSemaphoreGetCount</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaitingFromISR
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[34e]"></a>osSemaphoreDelete</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[2a5]"></a>osMessageQueueNew</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, cmsis_os2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMessageQueueNew &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCloud_ServiceInit
</UL>

<P><STRONG><a name="[238]"></a>osMessageQueuePut</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cmsis_os2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMessageQueuePut &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Service
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCom_ProcessM2mMsg
</UL>

<P><STRONG><a name="[2a4]"></a>osMessageQueueGet</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, cmsis_os2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMessageQueueGet &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_iCloud
</UL>

<P><STRONG><a name="[498]"></a>osMessageQueueGetCapacity</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os2.o(.text), UNUSED)

<P><STRONG><a name="[499]"></a>osMessageQueueGetMsgSize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os2.o(.text), UNUSED)

<P><STRONG><a name="[351]"></a>osMessageQueueGetCount</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaitingFromISR
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[352]"></a>osMessageQueueGetSpace</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[354]"></a>osMessageQueueReset</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[356]"></a>osMessageQueueDelete</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cmsis_os2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[386]"></a>vApplicationTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cmsis_os2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[389]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cmsis_os2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[38d]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[3a0]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[49a]"></a>OS_Tick_Setup</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, os_systick.o(.text), UNUSED)

<P><STRONG><a name="[49b]"></a>OS_Tick_Enable</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, os_systick.o(.text), UNUSED)

<P><STRONG><a name="[49c]"></a>OS_Tick_Disable</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, os_systick.o(.text), UNUSED)

<P><STRONG><a name="[49d]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_systick.o(.text), UNUSED)

<P><STRONG><a name="[49e]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(.text), UNUSED)

<P><STRONG><a name="[49f]"></a>OS_Tick_GetClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>OS_Tick_GetInterval</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_systick.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[2f7]"></a>OS_Tick_GetCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[2f8]"></a>OS_Tick_GetOverflow</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[32d]"></a>xEventGroupCreateStatic</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>

<P><STRONG><a name="[32e]"></a>xEventGroupCreate</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>

<P><STRONG><a name="[331]"></a>xEventGroupSetBits</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, event_groups.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupSetBitsCallback
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>

<P><STRONG><a name="[359]"></a>xEventGroupSync</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>

<P><STRONG><a name="[338]"></a>xEventGroupWaitBits</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestWaitCondition
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
</UL>

<P><STRONG><a name="[335]"></a>xEventGroupClearBits</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, event_groups.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xEventGroupClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupClearBitsCallback
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsGet
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
</UL>

<P><STRONG><a name="[35f]"></a>vEventGroupClearBitsCallback</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, event_groups.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vEventGroupClearBitsCallback &rArr; xEventGroupClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_groups.o(.text)
</UL>
<P><STRONG><a name="[334]"></a>xEventGroupClearBitsFromISR</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
</UL>

<P><STRONG><a name="[333]"></a>xEventGroupGetBitsFromISR</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsGet
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
</UL>

<P><STRONG><a name="[33a]"></a>vEventGroupDelete</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsDelete
</UL>

<P><STRONG><a name="[361]"></a>vEventGroupSetBitsCallback</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, event_groups.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vEventGroupSetBitsCallback &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event_groups.o(.text)
</UL>
<P><STRONG><a name="[330]"></a>xEventGroupSetBitsFromISR</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>

<P><STRONG><a name="[4a0]"></a>uxEventGroupGetNumber</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, event_groups.o(.text), UNUSED)

<P><STRONG><a name="[4a1]"></a>vEventGroupSetNumber</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, event_groups.o(.text), UNUSED)

<P><STRONG><a name="[357]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreateStatic
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[381]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[37f]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>

<P><STRONG><a name="[388]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[384]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
</UL>

<P><STRONG><a name="[313]"></a>pvPortMalloc</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEnumerate
</UL>

<P><STRONG><a name="[315]"></a>vPortFree</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEnumerate
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[4a2]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[4a3]"></a>xPortGetMinimumEverFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[4a4]"></a>vPortInitialiseBlocks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[382]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[365]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[364]"></a>xPortStartScheduler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[390]"></a>vPortEndScheduler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
</UL>

<P><STRONG><a name="[35c]"></a>vPortEnterCritical</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGetMutexHolder
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetTimerID
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetReloadMode
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[35d]"></a>vPortExitCritical</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGetMutexHolder
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetTimerID
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetReloadMode
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[2e9]"></a>xPortSysTickHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[355]"></a>xQueueGenericReset</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueReset
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[345]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[346]"></a>xQueueGenericCreate</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>

<P><STRONG><a name="[340]"></a>xQueueGenericSend</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCall
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>

<P><STRONG><a name="[33c]"></a>xQueueCreateMutex</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[33b]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[342]"></a>xQueueGetMutexHolder</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexGetOwner
</UL>

<P><STRONG><a name="[4a5]"></a>xQueueGetMutexHolderFromISR</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[33f]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[33e]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>

<P><STRONG><a name="[33d]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[347]"></a>xQueueCreateCountingSemaphoreStatic</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[348]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[34f]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[34a]"></a>xQueueGiveFromISR</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[350]"></a>xQueueReceive</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[379]"></a>xQueuePeek</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[349]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueReceiveFromISR &rArr; prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[37a]"></a>xQueuePeekFromISR</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[34d]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGetCount
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreGetCount
</UL>

<P><STRONG><a name="[353]"></a>uxQueueSpacesAvailable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGetSpace
</UL>

<P><STRONG><a name="[34c]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGetCount
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreGetCount
</UL>

<P><STRONG><a name="[344]"></a>vQueueDelete</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueDelete
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[4a6]"></a>uxQueueGetQueueNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[4a7]"></a>vQueueSetQueueNumber</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[4a8]"></a>ucQueueGetQueueType</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[4a9]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[4aa]"></a>xQueueIsQueueFullFromISR</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[37b]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[2fa]"></a>xTaskCreateStatic</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[2fb]"></a>xTaskCreate</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[30e]"></a>vTaskDelete</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[367]"></a>xTaskIncrementTick</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[2f1]"></a>xTaskResumeAll</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEnumerate
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRestoreLock
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
</UL>

<P><STRONG><a name="[2f0]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEnumerate
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRestoreLock
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
</UL>

<P><STRONG><a name="[31f]"></a>vTaskDelayUntil</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayUntil
</UL>

<P><STRONG><a name="[31d]"></a>vTaskDelay</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[301]"></a>eTaskGetState</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetState
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[307]"></a>uxTaskPriorityGet</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
</UL>

<P><STRONG><a name="[4ab]"></a>uxTaskPriorityGetFromISR</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>vTaskPrioritySet</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
</UL>

<P><STRONG><a name="[df]"></a>vTaskSwitchContext</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[30a]"></a>vTaskSuspend</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
</UL>

<P><STRONG><a name="[30c]"></a>vTaskResume</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
</UL>

<P><STRONG><a name="[38b]"></a>xTaskResumeFromISR</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
</UL>

<P><STRONG><a name="[2ef]"></a>vTaskStartScheduler</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[38f]"></a>vTaskEndScheduler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
</UL>

<P><STRONG><a name="[2f5]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayUntil
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[2f4]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
</UL>

<P><STRONG><a name="[311]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEnumerate
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetCount
</UL>

<P><STRONG><a name="[2fd]"></a>pcTaskGetName</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
</UL>

<P><STRONG><a name="[391]"></a>vTaskGetInfo</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>

<P><STRONG><a name="[314]"></a>uxTaskGetSystemState</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEnumerate
</UL>

<P><STRONG><a name="[371]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
</UL>

<P><STRONG><a name="[35a]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[37c]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[368]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[358]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
</UL>

<P><STRONG><a name="[394]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[36f]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
</UL>

<P><STRONG><a name="[370]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
</UL>

<P><STRONG><a name="[36b]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[4ac]"></a>uxTaskGetTaskNumber</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[4ad]"></a>vTaskSetTaskNumber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>uxTaskGetStackHighWaterMark</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetStackSpace
</UL>

<P><STRONG><a name="[2ff]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsGet
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsClear
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>

<P><STRONG><a name="[2e8]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRestoreLock
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[375]"></a>xTaskPriorityInherit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[36e]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[377]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[35b]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSync
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[374]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[395]"></a>ulTaskNotifyTake</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[31c]"></a>xTaskNotifyWait</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
</UL>

<P><STRONG><a name="[318]"></a>xTaskGenericNotify</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsGet
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsClear
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[317]"></a>xTaskGenericNotifyFromISR</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[396]"></a>vTaskNotifyGiveFromISR</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[397]"></a>xTaskNotifyStateClear</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[327]"></a>xTimerGenericCommand</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>

<P><STRONG><a name="[38e]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[323]"></a>xTimerCreate</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>

<P><STRONG><a name="[322]"></a>xTimerCreateStatic</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>

<P><STRONG><a name="[4ae]"></a>xTimerGetTimerDaemonTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[4af]"></a>xTimerGetPeriod</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[3a2]"></a>vTimerSetReloadMode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[4b0]"></a>xTimerGetExpiryTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[325]"></a>pcTimerGetName</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerGetName
</UL>

<P><STRONG><a name="[329]"></a>xTimerIsTimerActive</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerIsRunning
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
</UL>

<P><STRONG><a name="[320]"></a>pvTimerGetTimerID</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pvTimerGetTimerID
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[3a3]"></a>vTimerSetTimerID</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[360]"></a>xTimerPendFunctionCallFromISR</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBitsFromISR
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBitsFromISR
</UL>

<P><STRONG><a name="[3a4]"></a>xTimerPendFunctionCall</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[4b1]"></a>uxTimerGetTimerNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[4b2]"></a>vTimerSetTimerNumber</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[4b3]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeTlvMsg_0114
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildTlvMsg_0114
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeTlvMsg_0113
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildTlvMsg_0113
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeTlvMsg_0005
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildTlvMsg_0005
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeTlvMsg_0004
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildTlvMsg_0004
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeTlvMsg_0003
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildTlvMsg_0003
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeTlvMsg_0002
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildTlvMsg_0002
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildTlvMsg_0001
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildTlvMsg_F050
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildTlvMsg_F040
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildTlvMsg_F030
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildTlvMsg_F020
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildTlvMsg_F012
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildTlvMsg_F011
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildTlvMsg_F010
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildTlvMsg_F002
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildTlvMsg_F001
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TransmitString
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TransmitData
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Service
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendM2mRsp
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_EncodeM2mData
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TransmitString
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TransmitData
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_AlignWrite
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write (via Veneer)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveLvcInfo
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadLvcInfo
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqAtMsg
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildTlvMsg_100D
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeTlvMsg_100C
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildTlvMsg_100C
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeTlvMsg_1005
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildTlvMsg_1005
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetInfo
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_TransmitString
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_TransmitData
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCom_ProcessM2mMsg
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_AnalyzeUnReqMsg
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[1c2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TslIterByTime
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TslIter
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_CheckSecHdrCb
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ResetM2mAssetDataToFactory
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveM2mAssetData
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConvertDataTimeToSeconds
</UL>

<P><STRONG><a name="[236]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_DecodeM2mData
</UL>

<P><STRONG><a name="[4b4]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[4b5]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_BuildTlvMsg_0111
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_SetStatus
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_CreatKvBlob
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_AlignWrite
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FormatSentor
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ResetObdToDefault
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iCan_ProcessDtcMsg_J1939
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[4b6]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4b7]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ResetObdToDefault
</UL>

<P><STRONG><a name="[167]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_MoveKv
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ResetObdToDefault
</UL>

<P><STRONG><a name="[4b8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3a5]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1fb]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_MoveKv
</UL>

<P><STRONG><a name="[1cf]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SendString
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_TransmitString
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_TransmitString
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvSet
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvSetDefault
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_KvAutoUpdate
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_SetKv
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_CreatKvBlob
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_DelKv
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FindKv
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FindKvCb
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAL_ShowPartTalbe
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_TransmitString
</UL>

<P><STRONG><a name="[1d4]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAL_PartitionFind
</UL>

<P><STRONG><a name="[18e]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeCmdReqAtMsg
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_GetCmdReqType
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_AnalyzeUrRspMsg
</UL>

<P><STRONG><a name="[1d1]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FindKvCb
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GetKvFromCache
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAL_FlashDeviceFind
</UL>

<P><STRONG><a name="[4b9]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[3ba]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3a6]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4ba]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[3a9]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3ad]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3ae]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3af]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3b0]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3b1]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3b7]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[de]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[4bb]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3a8]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[4bc]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3a7]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[4bd]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4be]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[3ac]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3ab]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4bf]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4c0]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hardfaulthandler_1.o(OSKERNEL))
<BR><BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3b4]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4c1]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[4c2]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[4c3]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[231]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>

<P><STRONG><a name="[4c4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[4c5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[4c6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[3c6]"></a>sfud_spi_port_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sfud_spi_port_init &rArr; spi_configuration &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configuration
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_configuration
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3c8]"></a>sfud_read_status</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sfud_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>

<P><STRONG><a name="[3ca]"></a>sfud_write_status</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sfud_write_status &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3ce]"></a>sfud_device_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = sfud_device_init &rArr; hardware_init &rArr; sfud_spi_port_init &rArr; spi_configuration &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_init
</UL>

<P><STRONG><a name="[e4]"></a>sfud_init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sfud_init &rArr; sfud_device_init &rArr; hardware_init &rArr; sfud_spi_port_init &rArr; spi_configuration &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Start (via Veneer)
</UL>

<P><STRONG><a name="[1bf]"></a>sfud_read</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sfud_read &rArr; wait_busy &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadTboxOfflineTime (via Veneer)
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfu_ReadFlashHexFile (via Veneer)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadM2mAssetData (via Veneer)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadPidInfo (via Veneer)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadLvcInfo (via Veneer)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_ReadFlashHexFile
</UL>

<P><STRONG><a name="[3d0]"></a>sfud_chip_erase</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sfud_chip_erase &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[1bb]"></a>sfud_erase</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sfud_erase &rArr; sfud_chip_erase &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveTboxOfflineTime (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadTboxOfflineTime (via Veneer)
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase (via Veneer)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfu_EraseFlashHexFile (via Veneer)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ResetM2mAssetDataToFactory (via Veneer)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadM2mAssetData (via Veneer)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveM2mAssetData (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SavePidInfo (via Veneer)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase_write
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveLvcInfo (via Veneer)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadPidInfo (via Veneer)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadLvcInfo (via Veneer)
</UL>

<P><STRONG><a name="[1be]"></a>sfud_write</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveTboxOfflineTime (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadTboxOfflineTime (via Veneer)
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write (via Veneer)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfu_SaveFlashHexFile (via Veneer)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ResetM2mAssetDataToFactory (via Veneer)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadM2mAssetData (via Veneer)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveM2mAssetData (via Veneer)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SavePidInfo (via Veneer)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase_write
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_SaveLvcInfo (via Veneer)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadPidInfo (via Veneer)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ReadLvcInfo (via Veneer)
</UL>

<P><STRONG><a name="[3d3]"></a>sfud_erase_write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sfud.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[3d7]"></a>flash_FuncGetSectorSize</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, iap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncEraseApp
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncEraseSector
</UL>

<P><STRONG><a name="[3d4]"></a>flash_FuncWriteWord</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = flash_FuncWriteWord &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncProgramApp
</UL>

<P><STRONG><a name="[3d8]"></a>flash_FuncReadWord</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncEraseApp
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncProgramApp
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncReadApp
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncEraseSector
</UL>

<P><STRONG><a name="[3d6]"></a>flash_FuncEraseSector</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = flash_FuncEraseSector &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncReadWord
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncGetSectorSize
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncEraseApp
</UL>

<P><STRONG><a name="[3da]"></a>flash_FuncReadApp</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, iap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncReadWord
</UL>

<P><STRONG><a name="[3db]"></a>flash_FuncProgramApp</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = flash_FuncProgramApp &rArr; flash_FuncWriteWord &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncReadWord
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncWriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_main
</UL>

<P><STRONG><a name="[3dc]"></a>flash_FuncEraseApp</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flash_FuncEraseApp &rArr; flash_FuncEraseSector &rArr; FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncEraseSector
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncReadWord
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncGetSectorSize
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_main
</UL>

<P><STRONG><a name="[3df]"></a>iap_ReadFlashHexFile</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = iap_ReadFlashHexFile &rArr; sfud_read &rArr; wait_busy &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_main
</UL>

<P><STRONG><a name="[29f]"></a>iap_main</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, iap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = iap_main &rArr; iap_ReadFlashHexFile &rArr; sfud_read &rArr; wait_busy &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_ReadFlashHexFile
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncEraseApp
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncProgramApp
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tbox_iap (via Veneer)
</UL>

<P><STRONG><a name="[4c7]"></a>FLASH_SetLatency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[4c8]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[4c9]"></a>FLASH_InstructionCacheCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[4ca]"></a>FLASH_DataCacheCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[4cb]"></a>FLASH_InstructionCacheReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[4cc]"></a>FLASH_DataCacheReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[3dd]"></a>FLASH_Unlock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_main
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncEraseApp
</UL>

<P><STRONG><a name="[3e0]"></a>FLASH_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_main
</UL>

<P><STRONG><a name="[3e2]"></a>FLASH_GetStatus</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[3e1]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDPConfig
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRPConfig
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramByte
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramDoubleWord
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllSectors
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Launch
</UL>

<P><STRONG><a name="[3d9]"></a>FLASH_EraseSector</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_EraseSector &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncEraseSector
</UL>

<P><STRONG><a name="[3e3]"></a>FLASH_EraseAllSectors</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f2xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[3e4]"></a>FLASH_ProgramDoubleWord</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f2xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[3d5]"></a>FLASH_ProgramWord</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncWriteWord
</UL>

<P><STRONG><a name="[3e5]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32f2xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[3e6]"></a>FLASH_ProgramByte</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, stm32f2xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[275]"></a>FLASH_OB_Unlock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeTlvMsg_4000 (via Veneer)
</UL>

<P><STRONG><a name="[278]"></a>FLASH_OB_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeTlvMsg_4000 (via Veneer)
</UL>

<P><STRONG><a name="[3e7]"></a>FLASH_OB_WRPConfig</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f2xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[3e8]"></a>FLASH_OB_RDPConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f2xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[276]"></a>FLASH_OB_UserConfig</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLASH_OB_UserConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeTlvMsg_4000 (via Veneer)
</UL>

<P><STRONG><a name="[4cd]"></a>FLASH_OB_BORConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>FLASH_OB_Launch</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_OB_Launch &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeTlvMsg_4000 (via Veneer)
</UL>

<P><STRONG><a name="[12a]"></a>FLASH_OB_GetUser</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_ReadInternalWdtState (via Veneer)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im2m_AnalyzeTlvMsg_4000 (via Veneer)
</UL>

<P><STRONG><a name="[4ce]"></a>FLASH_OB_GetWRP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[4cf]"></a>FLASH_OB_GetRDP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[4d0]"></a>FLASH_OB_GetBOR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[4d1]"></a>FLASH_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[4d2]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[3de]"></a>FLASH_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_main
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_FuncEraseApp
</UL>

<P><STRONG><a name="[3e9]"></a>GPIO_DeInit</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32f2xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd (via Veneer)
</UL>

<P><STRONG><a name="[fb]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize (via Veneer)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GpioInitialize (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IN_GPIO_EXTI_Initialize (via Veneer)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_WAKE_GPIO_EXTI_Initialize (via Veneer)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WAKE_UP_GPIO_EXTI_Initialize (via Veneer)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Initialize (via Veneer)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_Initialize (via Veneer)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Initialize (via Veneer)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modem_GpioInitialize (via Veneer)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Initialize (via Veneer)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_configuration
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c1_Initialize (via Veneer)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Initialize (via Veneer)
</UL>

<P><STRONG><a name="[4d3]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4d4]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4d5]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4d6]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4d7]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4d8]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[3c5]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
</UL>

<P><STRONG><a name="[3c1]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
</UL>

<P><STRONG><a name="[4d9]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4da]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[4db]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize (via Veneer)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Initialize (via Veneer)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Initialize (via Veneer)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_configuration
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_Initialize (via Veneer)
</UL>

<P><STRONG><a name="[3be]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configuration
</UL>

<P><STRONG><a name="[3bf]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configuration
</UL>

<P><STRONG><a name="[4dc]"></a>I2S_Init</STRONG> (Thumb, 350 bytes, Stack size 36 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[4dd]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[4de]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3c0]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configuration
</UL>

<P><STRONG><a name="[4df]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[4e0]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[4e1]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[4e2]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[4e3]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[4e4]"></a>SPI_TIModeCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3c4]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
</UL>

<P><STRONG><a name="[3c3]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
</UL>

<P><STRONG><a name="[4e5]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[4e6]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[4e7]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[4e8]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[4e9]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[4ea]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
</UL>

<P><STRONG><a name="[4eb]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[4ec]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f2xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[4ed]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f2xx_spi.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[104]"></a>SetSysClock</STRONG> (Thumb, 186 bytes, Stack size 12 bytes, system_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[16e]"></a>can_msg_queue_pop</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Can2Recv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Can1Recv
</UL>

<P><STRONG><a name="[16f]"></a>can_msg_queue_size</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Can2Recv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppThread_Can1Recv
</UL>

<P><STRONG><a name="[18d]"></a>strnstr</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, tcw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = strnstr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ProcessCiMsg
</UL>

<P><STRONG><a name="[3bb]"></a>rcc_configuration</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcc_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd (via Veneer)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
</UL>

<P><STRONG><a name="[3bc]"></a>gpio_configuration</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gpio_configuration &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
</UL>

<P><STRONG><a name="[3bd]"></a>spi_configuration</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = spi_configuration &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew (via Veneer)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
</UL>

<P><STRONG><a name="[da]"></a>spi_lock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = spi_lock &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfud.o(.text)
</UL>
<P><STRONG><a name="[db]"></a>spi_unlock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = spi_unlock &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfud.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>spi_write_read</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spi_write_read
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sfud.o(.text)
</UL>
<P><STRONG><a name="[dc]"></a>retry_delay_100us</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sfud.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sfud.o(.text)
</UL>
<P><STRONG><a name="[3c7]"></a>set_write_enabled</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
</UL>

<P><STRONG><a name="[3c9]"></a>set_4_byte_address_mode</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_4_byte_address_mode &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3cb]"></a>wait_busy</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wait_busy &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
</UL>

<P><STRONG><a name="[3cc]"></a>reset</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = reset &rArr; wait_busy &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3cd]"></a>hardware_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = hardware_init &rArr; sfud_spi_port_init &rArr; spi_configuration &rArr; osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>

<P><STRONG><a name="[3cf]"></a>make_adress_byte_array</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = make_adress_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
</UL>

<P><STRONG><a name="[3d1]"></a>page256_or_1_byte_write</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[3d2]"></a>aai_write</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, sfud.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
</UL>

<P><STRONG><a name="[c6]"></a>fdb_lock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fdb_lock &rArr; osSemaphoreAcquire &rArr; xQueueSemaphoreTake &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> parameters.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>fdb_unlock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, parameters.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fdb_unlock &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> parameters.o(.text)
</UL>
<P><STRONG><a name="[2]"></a>init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fal.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fal.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>read</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = read &rArr; sfud_read &rArr; wait_busy &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = write &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>erase</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = erase &rArr; sfud_erase &rArr; sfud_chip_erase &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal.o(.data)
</UL>
<P><STRONG><a name="[202]"></a>iFDB_IsString</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, flashdb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvGet
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_PrintKvCb
</UL>

<P><STRONG><a name="[1ee]"></a>iKVDB_UpdateSectorCache</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iKVDB_UpdateSectorCache
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_CreatKvBlob
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_MoveKv
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_UpdateSentorStatus
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FormatSentor
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_ReadSectorInfo
</UL>

<P><STRONG><a name="[1ea]"></a>iKVDB_GetSectorFromCache</STRONG> (Thumb, 442 bytes, Stack size 8 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iKVDB_GetSectorFromCache
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_ReadSectorInfo
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FindNextKvAddr
</UL>

<P><STRONG><a name="[1e6]"></a>iKVDB_UpdataKvCache</STRONG> (Thumb, 288 bytes, Stack size 52 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iKVDB_UpdataKvCache &rArr; iFDB_CalcCrc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_CalcCrc32
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_CreatKvBlob
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_MoveKv
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_DelKv
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FindKv
</UL>

<P><STRONG><a name="[1e8]"></a>iKVDB_GetKvFromCache</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = iKVDB_GetKvFromCache &rArr; iFDB_FlashRead &rArr; FAL_PartitionRead &rArr; FAL_FlashDeviceFind &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_CalcCrc32
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashRead
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FindKv
</UL>

<P><STRONG><a name="[1e9]"></a>iKVDB_FindNextKvAddr</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = iKVDB_FindNextKvAddr &rArr; iFDB_FlashRead &rArr; FAL_PartitionRead &rArr; FAL_FlashDeviceFind &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashRead
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GetSectorFromCache
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GetNextKvAddr
</UL>

<P><STRONG><a name="[1eb]"></a>iKVDB_GetNextKvAddr</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = iKVDB_GetNextKvAddr &rArr; iKVDB_FindNextKvAddr &rArr; iFDB_FlashRead &rArr; FAL_PartitionRead &rArr; FAL_FlashDeviceFind &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FindNextKvAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvIterate
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_DoGc
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_KvIterator
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_ReadSectorInfo
</UL>

<P><STRONG><a name="[1ec]"></a>iKVDB_ReadKv</STRONG> (Thumb, 350 bytes, Stack size 96 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_CalcCrc32
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_WriteStatus
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashRead
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_GetStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvIterate
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_DoGc
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FindKv
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_KvIterator
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_ReadSectorInfo
</UL>

<P><STRONG><a name="[1ed]"></a>iKVDB_ReadSectorInfo</STRONG> (Thumb, 422 bytes, Stack size 104 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_ContinueFfAddr
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashRead
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_GetStatus
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_ReadKv
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GetNextKvAddr
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GetSectorFromCache
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_UpdateSectorCache
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvIterate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_SentorIterator
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_KvIterator
</UL>

<P><STRONG><a name="[1f0]"></a>iKVDB_GetNextSectorAddr</STRONG> (Thumb, 218 bytes, Stack size 12 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = iKVDB_GetNextSectorAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvIterate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_SentorIterator
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_KvIterator
</UL>

<P><STRONG><a name="[1ef]"></a>iKVDB_KvIterator</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GetNextSectorAddr
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_ReadSectorInfo
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_ReadKv
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GetNextKvAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvPrint
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_KvLoad
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FindKvNoCache
</UL>

<P><STRONG><a name="[c8]"></a>iKVDB_FindKvCb</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = iKVDB_FindKvCb &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flashdb.o(.text)
</UL>
<P><STRONG><a name="[1f1]"></a>iKVDB_FindKvNoCache</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_KvIterator
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_MoveKv
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FindKv
</UL>

<P><STRONG><a name="[1f2]"></a>iKVDB_FindKv</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FindKvNoCache
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_ReadKv
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GetKvFromCache
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_UpdataKvCache
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvGetObj
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_KvAutoUpdate
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_SetKv
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_DelKv
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GetKv
</UL>

<P><STRONG><a name="[1f3]"></a>iKVDB_GetKv</STRONG> (Thumb, 78 bytes, Stack size 88 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = iKVDB_GetKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashRead
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FindKv
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_KvAutoUpdate
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FalshDB_KvGetBlob
</UL>

<P><STRONG><a name="[1f4]"></a>iKVDB_WriteKvHdr</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = iKVDB_WriteKvHdr &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_WriteStatus
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_CreatKvBlob
</UL>

<P><STRONG><a name="[1f5]"></a>iKVDB_FormatSentor</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = iKVDB_FormatSentor &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashWrite
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashErase
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_SetStatus
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_UpdateSectorCache
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvSetDefault
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_CheckSecHdrCb
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_DoGc
</UL>

<P><STRONG><a name="[1f6]"></a>iKVDB_UpdateSentorStatus</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = iKVDB_UpdateSentorStatus &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_WriteStatus
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_UpdateSectorCache
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_CreatKvBlob
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_MoveKv
</UL>

<P><STRONG><a name="[1f7]"></a>iKVDB_SentorIterator</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = iKVDB_SentorIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GetNextSectorAddr
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_ReadSectorInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_KvLoad
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GcCollect
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_AllocKv
</UL>

<P><STRONG><a name="[c9]"></a>iKVDB_SentorStatisticsCb</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = iKVDB_SentorStatisticsCb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flashdb.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>iKVDB_AllocKvCb</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = iKVDB_AllocKvCb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flashdb.o(.text)
</UL>
<P><STRONG><a name="[1f8]"></a>iKVDB_AllocKv</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = iKVDB_AllocKv &rArr; iKVDB_SentorIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_SentorIterator
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_NewKv
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_MoveKv
</UL>

<P><STRONG><a name="[1f9]"></a>iKVDB_DelKv</STRONG> (Thumb, 330 bytes, Stack size 96 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = iKVDB_DelKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_ReadStatus
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_WriteStatus
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FindKv
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_UpdataKvCache
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvDel
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_SetKv
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_MoveKv
</UL>

<P><STRONG><a name="[1fa]"></a>iKVDB_MoveKv</STRONG> (Thumb, 316 bytes, Stack size 152 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = iKVDB_MoveKv &rArr; iKVDB_DelKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_WriteStatus
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashWrite
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashRead
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_DelKv
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_AllocKv
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_UpdateSentorStatus
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FindKvNoCache
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_UpdataKvCache
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_UpdateSectorCache
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_CheckAndRecoveryKvCb
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_DoGc
</UL>

<P><STRONG><a name="[cc]"></a>iKVDB_DoGc</STRONG> (Thumb, 206 bytes, Stack size 88 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = iKVDB_DoGc &rArr; iKVDB_MoveKv &rArr; iKVDB_DelKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_WriteStatus
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_MoveKv
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FormatSentor
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_ReadKv
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GetNextKvAddr
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flashdb.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>iKVDB_GcCheckCb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iKVDB_GcCheckCb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flashdb.o(.text)
</UL>
<P><STRONG><a name="[1fc]"></a>iKVDB_GcCollect</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = iKVDB_GcCollect &rArr; iKVDB_SentorIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_SentorIterator
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_KvLoad
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_CheckAndRecoveryGcCb
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_SetKv
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_NewKv
</UL>

<P><STRONG><a name="[1fd]"></a>iKVDB_NewKv</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = iKVDB_NewKv &rArr; iKVDB_AllocKv &rArr; iKVDB_SentorIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GcCollect
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_AllocKv
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_CreatKvBlob
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_NewKvEx
</UL>

<P><STRONG><a name="[1fe]"></a>iKVDB_NewKvEx</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = iKVDB_NewKvEx &rArr; iKVDB_NewKv &rArr; iKVDB_AllocKv &rArr; iKVDB_SentorIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_NewKv
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_SetKv
</UL>

<P><STRONG><a name="[1ff]"></a>iKVDB_AlignWrite</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = iKVDB_AlignWrite &rArr; iFDB_FlashWrite &rArr; FAL_PartitionWrite &rArr; FAL_FlashDeviceFind &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashWrite
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_CreatKvBlob
</UL>

<P><STRONG><a name="[200]"></a>iKVDB_CreatKvBlob</STRONG> (Thumb, 740 bytes, Stack size 72 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = iKVDB_CreatKvBlob &rArr; iKVDB_NewKv &rArr; iKVDB_AllocKv &rArr; iKVDB_SentorIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_CalcCrc32
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_WriteStatus
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_AlignWrite
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_NewKv
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_UpdateSentorStatus
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_WriteKvHdr
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_UpdataKvCache
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_UpdateSectorCache
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvSetDefault
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_KvAutoUpdate
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_SetKv
</UL>

<P><STRONG><a name="[201]"></a>iKVDB_SetKv</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = iKVDB_SetKv &rArr; iKVDB_DelKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_CreatKvBlob
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_NewKvEx
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GcCollect
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_DelKv
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FindKv
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_KvAutoUpdate
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvSetBlob
</UL>

<P><STRONG><a name="[d0]"></a>iKVDB_PrintKvCb</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = iKVDB_PrintKvCb &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashRead
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_IsString
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flashdb.o(.text)
</UL>
<P><STRONG><a name="[203]"></a>iKVDB_KvAutoUpdate</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = iKVDB_KvAutoUpdate &rArr; iKVDB_SetKv &rArr; iKVDB_DelKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_SetKv
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_CreatKvBlob
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GetKv
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FindKv
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_KvdbInit
</UL>

<P><STRONG><a name="[cd]"></a>iKVDB_CheckSecHdrCb</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = iKVDB_CheckSecHdrCb &rArr; iKVDB_FormatSentor &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_FormatSentor
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flashdb.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>iKVDB_CheckAndRecoveryGcCb</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = iKVDB_CheckAndRecoveryGcCb &rArr; iKVDB_GcCollect &rArr; iKVDB_SentorIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_GcCollect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flashdb.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>iKVDB_CheckAndRecoveryKvCb</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = iKVDB_CheckAndRecoveryKvCb &rArr; iKVDB_MoveKv &rArr; iKVDB_DelKv &rArr; iKVDB_FindKv &rArr; iKVDB_FindKvNoCache &rArr; iKVDB_KvIterator &rArr; iKVDB_ReadSectorInfo &rArr; iKVDB_ReadKv &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_WriteStatus
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iKVDB_MoveKv
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flashdb.o(.text)
</UL>
<P><STRONG><a name="[20c]"></a>iTSDB_ReadTsl</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashRead
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TslIterByTime
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TslIter
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_ReadSectorInfo
</UL>

<P><STRONG><a name="[210]"></a>iTSDB_GetNextSectorAddr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TslIterByTime
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TslIter
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_SectorIterator
</UL>

<P><STRONG><a name="[217]"></a>iTSDB_GetNextTslAddr</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TslIterByTime
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TslIter
</UL>

<P><STRONG><a name="[20d]"></a>iTSDB_ReadSectorInfo</STRONG> (Thumb, 366 bytes, Stack size 88 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashRead
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_GetStatus
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_ReadTsl
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TsdbInit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TslIterByTime
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TslIter
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_TslFormatAll
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_UpdateSecStatus
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_SectorIterator
</UL>

<P><STRONG><a name="[20e]"></a>iTSDB_FormatSector</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = iTSDB_FormatSector &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_WriteStatus
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashWrite
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashErase
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_FormatAllCb
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_UpdateSecStatus
</UL>

<P><STRONG><a name="[20f]"></a>iTSDB_SectorIterator</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_ReadSectorInfo
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_GetNextSectorAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TsdbInit
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_TslFormatAll
</UL>

<P><STRONG><a name="[211]"></a>iTSDB_WriteTsl</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_WriteStatus
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_TslAppend
</UL>

<P><STRONG><a name="[212]"></a>iTSDB_UpdateSecStatus</STRONG> (Thumb, 494 bytes, Stack size 64 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_WriteStatus
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFDB_FlashWrite
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_FormatSector
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_ReadSectorInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_TslAppend
</UL>

<P><STRONG><a name="[213]"></a>iTSDB_TslAppend</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_UpdateSecStatus
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_WriteTsl
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TslAppend
</UL>

<P><STRONG><a name="[d2]"></a>iTSDB_QueryCountCb</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iTSDB_QueryCountCb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flashdb.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>iTSDB_CheckSecHdrCb</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = iTSDB_CheckSecHdrCb &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flashdb.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>iTSDB_FormatAllCb</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, flashdb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = iTSDB_FormatAllCb &rArr; iTSDB_FormatSector &rArr; iFDB_WriteStatus &rArr; PcDebug_Printf &rArr; osMutexRelease &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_FormatSector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flashdb.o(.text)
</UL>
<P><STRONG><a name="[214]"></a>iTSDB_TslFormatAll</STRONG> (Thumb, 78 bytes, Stack size 64 bytes, flashdb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_SectorIterator
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iTSDB_ReadSectorInfo
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TsdbInit
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDB_TslClean
</UL>

<P><STRONG><a name="[242]"></a>momi_msg_queue_pop</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, momiprotocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;momi_msg_queue_find
</UL>

<P><STRONG><a name="[243]"></a>momi_msg_queue_size</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, momiprotocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_ModemProcess
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;momi_msg_queue_find
</UL>

<P><STRONG><a name="[250]"></a>iMomi_BuildTlvMsg_F001</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iMomi_BuildTlvMsg_F001 &rArr; iMomi_BuildAdSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_BuildAdSwitch
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iZxm2m_UpdateTlvMsg_A504
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iZxm2m_UpdateTlvMsg_A501
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendColtMsg
</UL>

<P><STRONG><a name="[252]"></a>iMomi_BuildTlvMsg_F002</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, momiprotocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendGpsMsg
</UL>

<P><STRONG><a name="[253]"></a>iMomi_BuildTlvMsg_F010</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iMomi_BuildTlvMsg_F010 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendVehicleMsg
</UL>

<P><STRONG><a name="[254]"></a>iMomi_BuildTlvMsg_F011</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iMomi_BuildTlvMsg_F011 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendVehicleMsg
</UL>

<P><STRONG><a name="[255]"></a>iMomi_BuildTlvMsg_F012</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iMomi_BuildTlvMsg_F012 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendVehicleMsg
</UL>

<P><STRONG><a name="[256]"></a>iMomi_BuildTlvMsg_F020</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, momiprotocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendDtcMsg
</UL>

<P><STRONG><a name="[257]"></a>iMomi_BuildTlvMsg_F030</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iMomi_BuildTlvMsg_F030 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendStatisticsMsg
</UL>

<P><STRONG><a name="[258]"></a>iMomi_BuildTlvMsg_F040</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iMomi_BuildTlvMsg_F040 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendVersionMsg
</UL>

<P><STRONG><a name="[259]"></a>iMomi_BuildTlvMsg_F050</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, momiprotocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_SendCanMsg
</UL>

<P><STRONG><a name="[264]"></a>iMomi_AnalyzeTlvMsg_E001</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iMomi_AnalyzeTlvMsg_E001
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcSoft_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_AnalyzeTlvData
</UL>

<P><STRONG><a name="[267]"></a>Momi_ProcessRecvData</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, momiprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Momi_ProcessRecvData &rArr; iMomi_AnalyzeTlvData &rArr; iMomi_AnalyzeTlvMsg_E001
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iMomi_AnalyzeTlvData
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Momi_CheckMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_ModemProcess
</UL>

<P><STRONG><a name="[2d]"></a>im2m_BuildTlvMsg_0111</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = im2m_BuildTlvMsg_0111
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>im2m_AnalyzeTlvMsg_0111</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m2mprotocol.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>im2m_BuildTlvMsg_0000</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_0000
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>im2m_AnalyzeTlvMsg_0000</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_0000
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>im2m_BuildTlvMsg_0001</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im2m_BuildTlvMsg_0001 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>im2m_BuildTlvMsg_0002</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im2m_BuildTlvMsg_0002 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>im2m_AnalyzeTlvMsg_0002</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im2m_AnalyzeTlvMsg_0002 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>im2m_BuildTlvMsg_0003</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im2m_BuildTlvMsg_0003 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>im2m_AnalyzeTlvMsg_0003</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im2m_AnalyzeTlvMsg_0003 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>im2m_BuildTlvMsg_0004</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im2m_BuildTlvMsg_0004 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>im2m_AnalyzeTlvMsg_0004</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im2m_AnalyzeTlvMsg_0004 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>im2m_BuildTlvMsg_0005</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im2m_BuildTlvMsg_0005 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>im2m_AnalyzeTlvMsg_0005</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im2m_AnalyzeTlvMsg_0005 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>im2m_BuildTlvMsg_0006</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_0006
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>im2m_AnalyzeTlvMsg_0006</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_0006
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>im2m_BuildTlvMsg_0007</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_0007
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>im2m_AnalyzeTlvMsg_0007</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_0007
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>im2m_BuildTlvMsg_0008</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_0008
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>im2m_AnalyzeTlvMsg_0008</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_0008
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>im2m_BuildTlvMsg_0009</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_0009
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>im2m_AnalyzeTlvMsg_0009</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_0009
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>im2m_BuildTlvMsg_000A</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_000A
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>im2m_AnalyzeTlvMsg_000A</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_000A
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>im2m_BuildTlvMsg_000B</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_000B
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>im2m_AnalyzeTlvMsg_000B</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_000B
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>im2m_BuildTlvMsg_000C</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_000C
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>im2m_AnalyzeTlvMsg_000C</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_000C
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>im2m_BuildTlvMsg_0106</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_0106
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>im2m_AnalyzeTlvMsg_0106</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_0106
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>im2m_BuildTlvMsg_0107</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_0107
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>im2m_AnalyzeTlvMsg_0107</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_0107
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>im2m_BuildTlvMsg_0108</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = im2m_BuildTlvMsg_0108
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>im2m_AnalyzeTlvMsg_0108</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = im2m_AnalyzeTlvMsg_0108
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>im2m_BuildTlvMsg_010B</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_010B
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>im2m_AnalyzeTlvMsg_010B</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_010B
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>im2m_BuildTlvMsg_010C</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_010C
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>im2m_AnalyzeTlvMsg_010C</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_010C
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>im2m_BuildTlvMsg_010D</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_010D
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>im2m_AnalyzeTlvMsg_010D</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_010D
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>im2m_BuildTlvMsg_0110</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_0110
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>im2m_AnalyzeTlvMsg_0110</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_0110
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>im2m_BuildTlvMsg_0113</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im2m_BuildTlvMsg_0113 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>im2m_AnalyzeTlvMsg_0113</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im2m_AnalyzeTlvMsg_0113 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>im2m_BuildTlvMsg_0114</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im2m_BuildTlvMsg_0114 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>im2m_AnalyzeTlvMsg_0114</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im2m_AnalyzeTlvMsg_0114 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>im2m_BuildTlvMsg_0115</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_0115
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>im2m_AnalyzeTlvMsg_0115</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_0115
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>im2m_BuildTlvMsg_0116</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_0116
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>im2m_AnalyzeTlvMsg_0116</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m2mprotocol.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>im2m_BuildTlvMsg_0117</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_0117
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>im2m_AnalyzeTlvMsg_0117</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_0117
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>im2m_BuildTlvMsg_0118</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_0118
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>im2m_AnalyzeTlvMsg_0118</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_0118
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>im2m_BuildTlvMsg_0119</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_0119
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>im2m_AnalyzeTlvMsg_0119</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_0119
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>im2m_BuildTlvMsg_011A</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_011A
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>im2m_AnalyzeTlvMsg_011A</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_011A
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>im2m_BuildTlvMsg_0201</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_0201
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>im2m_AnalyzeTlvMsg_0201</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_0201
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>im2m_BuildTlvMsg_0202</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_0202
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>im2m_AnalyzeTlvMsg_0202</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_0202
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>im2m_BuildTlvMsg_0203</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_0203
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>im2m_AnalyzeTlvMsg_0203</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_0203
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>im2m_BuildTlvMsg_0204</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_0204
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>im2m_AnalyzeTlvMsg_0204</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_0204
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>im2m_BuildTlvMsg_0205</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_0205
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>im2m_AnalyzeTlvMsg_0205</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_0205
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>im2m_BuildTlvMsg_0206</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_0206
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>im2m_AnalyzeTlvMsg_0206</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_0206
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>im2m_BuildTlvMsg_020A</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_020A
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>im2m_AnalyzeTlvMsg_020A</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_020A
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>im2m_BuildTlvMsg_020B</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_020B
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>im2m_AnalyzeTlvMsg_020B</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_020B
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>im2m_AnalyzeTlvMsg_1002</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_1002
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>im2m_AnalyzeTlvMsg_1003</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_1003
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>im2m_BuildTlvMsg_1005</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im2m_BuildTlvMsg_1005 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>im2m_AnalyzeTlvMsg_1005</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im2m_AnalyzeTlvMsg_1005 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>im2m_BuildTlvMsg_100C</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im2m_BuildTlvMsg_100C &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>im2m_AnalyzeTlvMsg_100C</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im2m_AnalyzeTlvMsg_100C &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[272]"></a>im2m_BuildTlvMsg_100D</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, m2mprotocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[55]"></a>im2m_AnalyzeTlvMsg_100E</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_100E
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>im2m_BuildTlvMsg_2000</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_2000
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>im2m_AnalyzeTlvMsg_2000</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_2000
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>im2m_BuildTlvMsg_2001</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_2001
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>im2m_AnalyzeTlvMsg_2001</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_2001
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>im2m_BuildTlvMsg_2002</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_2002
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>im2m_AnalyzeTlvMsg_2002</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_AnalyzeTlvMsg_2002
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>im2m_BuildTlvMsg_3016</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = im2m_BuildTlvMsg_3016
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_GetTotalWorkTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>im2m_AnalyzeTlvMsg_3016</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im2m_AnalyzeTlvMsg_3016
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COLT_SetTotalWorkTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>im2m_AnalyzeTlvMsg_4000</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = im2m_AnalyzeTlvMsg_4000 &rArr; FLASH_OB_UserConfig &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_GetUser (via Veneer)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTL_SetRestartDelayTime
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig (via Veneer)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Unlock (via Veneer)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Lock (via Veneer)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Launch (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>im2m_AnalyzeTlvMsg_4001</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = im2m_AnalyzeTlvMsg_4001 &rArr; Parm_ResetM2mAssetDataToFactory &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTL_SetRestartDelayTime
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parm_ResetM2mAssetDataToFactory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>im2m_AnalyzeTlvMsg_4004</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m2mprotocol.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>im2m_AnalyzeTlvMsg_4008</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = im2m_AnalyzeTlvMsg_4008
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTL_SetPwroffDelayTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>im2m_AnalyzeTlvMsg_4FFF</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = im2m_AnalyzeTlvMsg_4FFF
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcDebug_SetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>im2m_AnalyzeTlvMsg_A1FE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m2mprotocol.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>im2m_BuildTlvMsg_A1FE</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m2mprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im2m_BuildTlvMsg_A1FE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>im2m_AnalyzeTlvMsg_A1FF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, m2mprotocol.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> m2mprotocol.o(.data)
</UL>
<P><STRONG><a name="[2cd]"></a>CheckITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
</UL>

<P><STRONG><a name="[2e0]"></a>FCLIT_ProcessRecvMsg</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, auxcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = FCLIT_ProcessRecvMsg &rArr; iFCLIT_AnalyzeUdRspMsg &rArr; rfu_SaveFlashHexFile &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; sfud_read_status
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_AnalyzeUrRspMsg
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_AnalyzeUdRspMsg
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_AnalyzeUnReqMsg
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFCLIT_CheckMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask_AuxComProcess
</UL>

<P><STRONG><a name="[d4]"></a>TimerCallback</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cmsis_os2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TimerCallback &rArr; pvTimerGetTimerID
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmsis_os2.o(.text)
</UL>
<P><STRONG><a name="[2ea]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueDelete
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueReset
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGetSpace
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGetCount
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreGetCount
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexGetOwner
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsDelete
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsGet
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerIsRunning
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerGetName
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayUntil
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsGet
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsClear
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEnumerate
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetCount
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetStackSpace
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetState
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRestoreLock
</UL>

<P><STRONG><a name="[2eb]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueDelete
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueReset
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGetSpace
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGetCount
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreGetCount
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexGetOwner
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsDelete
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsGet
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerIsRunning
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerGetName
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayUntil
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsGet
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsClear
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEnumerate
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetCount
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetStackSpace
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetState
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRestoreLock
</UL>

<P><STRONG><a name="[2ec]"></a>__get_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelUnlock
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelLock
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueDelete
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueReset
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGetSpace
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGetCount
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreGetCount
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexGetOwner
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsDelete
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsGet
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerIsRunning
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerGetName
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayUntil
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsGet
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsClear
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEnumerate
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetCount
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetStackSpace
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetState
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRestoreLock
</UL>

<P><STRONG><a name="[35e]"></a>prvTestWaitCondition</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, event_groups.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[363]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[362]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[d5]"></a>prvTaskExitError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[369]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[36a]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
</UL>

<P><STRONG><a name="[36c]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[36d]"></a>prvCopyDataToQueue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[372]"></a>prvInitialiseMutex</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[376]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[373]"></a>prvIsQueueEmpty</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
</UL>

<P><STRONG><a name="[378]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
</UL>

<P><STRONG><a name="[37d]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[37e]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[380]"></a>prvInitialiseNewTask</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[385]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[383]"></a>prvDeleteTCB</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[387]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[38a]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
</UL>

<P><STRONG><a name="[38c]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[d6]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[392]"></a>prvTaskCheckFreeStackSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[393]"></a>prvListTasksWithinSingleList</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[398]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[399]"></a>prvSwitchTimerLists</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[39a]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[39b]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[39c]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[39d]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[39e]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[d7]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[39f]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[3a1]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateStatic
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[3b6]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3b5]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[3b9]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3b8]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d8]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
